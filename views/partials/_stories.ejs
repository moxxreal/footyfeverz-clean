<section class="stories">
  <div class="stories-container">
    <!-- Add Story -->
    <div class="story-item add-story" onclick="handleAddStoryClick()">
      <div class="add-story-content">
        <div class="plus">Ôºã</div>
        <div>Add Story</div>
      </div>
    </div>

    <!-- User Stories -->
    <% if (stories.length) { %>
      <% stories.forEach((story, index) => { %>
        <div class="story-item" onclick="openStoryModal(<%= index %>)">
          <% if (/\.(mp4|webm|ogg)$/i.test(story.image)) { %>
            <video src="<%= story.image %>" muted></video>
          <% } else { %>
            <img src="<%= story.image %>" alt="Story by <%= story.username %>">
          <% } %>
        </div>
      <% }) %>
    <% } else { %>
      <p>No stories found.</p>
    <% } %>

    <!-- Upload Form -->
    <form id="storyForm" action="/stories/upload" method="POST" enctype="multipart/form-data" style="display:none;">
      <input type="file" id="storyFile" name="storyMedia" accept="image/*,video/*" required />
    </form>
  </div>
</section>

<!-- Story Modal -->
<div id="storyModal">
  <div class="story-progress"><div class="story-progress-bar" id="progressBar"></div></div>
  <div class="story-uploader" id="storyUploader"></div>
  <div class="modal-content" id="modalContent"></div>
  <div class="story-caption" id="storyCaption"></div>

  <div id="replyToast" class="reply-toast">üí¨ Reply sent!</div>

  <div class="story-actions">
  <div class="reply-container">
    <div class="reply-box">
      <input type="text" id="replyInput" placeholder="Reply to this story..." oninput="toggleReplyUI()" />
      <button id="sendButton" onclick="submitReply()">Send</button>
    </div>
  </div>
  <div class="reaction-buttons" id="reactionButtons">
    <button onclick="sendReaction('‚ù§Ô∏è')">‚ù§Ô∏è <span id="count-heart">0</span></button>
    <button onclick="sendReaction('üòÇ')">üòÇ <span id="count-laugh">0</span></button>
    <button onclick="sendReaction('üò°')">üò° <span id="count-angry">0</span></button>
    <button onclick="sendReaction('üëç')">üëç <span id="count-like">0</span></button>
  </div>
</div>

  <div class="close-modal" onclick="closeStoryModal()">‚úñ</div>
  <div class="modal-arrow left" onclick="prevStory()">‚ùÆ</div>
  <div class="modal-arrow right" onclick="nextStory()">‚ùØ</div>
  <div id="storyReplies" class="story-replies"></div>
</div>
<style>
/* --- STORIES CONTAINER --- */
.stories-container {
  display: flex;
  flex-wrap: nowrap;
  overflow-x: auto;
  gap: 10px;
  padding: 10px;
  scroll-snap-type: x mandatory;
}
.stories-container::-webkit-scrollbar {
  height: 8px;
}
.stories-container::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.4);
  border-radius: 4px;
}
.story-item {
  flex: 0 0 auto;
  width: 150px;
  height: 150px;
  overflow: hidden;
  border-radius: 8px;
  background: #222;
  cursor: pointer;
  transition: transform 0.2s;
  scroll-snap-align: start;
}
.story-item:hover {
  transform: scale(1.05);
}
.story-item img,
.story-item video {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 8px;
}
.story-item.add-story {
  background: #f0f0f0;
  border: 1px solid #ccc;
  display: flex;
  justify-content: center;
  align-items: center;
}
.add-story-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.add-story-content .plus {
  font-size: 36px;
  font-weight: bold;
}
.add-story-content div:last-child {
  font-size: 16px;
  font-weight: bold;
}

/* --- MODAL --- */
#storyModal {
  position: fixed;
  inset: 0;
  display: none;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.95);
  z-index: 9999;
  overflow: hidden;
  touch-action: none;
  flex-direction: column;
}
#storyModal.show {
  display: flex;
}
#modalContent img,
#modalContent video {
  max-width: 100%;
  max-height: 100vh;
  object-fit: contain;
}
.story-progress {
  position: absolute;
  top: 10px;
  left: 5%;
  width: 90%;
  height: 4px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 2px;
}
.story-progress-bar {
  height: 100%;
  width: 0%;
  background: #ffcc00;
  transition: width 5s linear;
}
.story-caption {
  position: absolute;
  bottom: 130px;
  width: 90%;
  text-align: center;
  color: white;
  font-size: 18px;
  padding: 0 10px;
  word-wrap: break-word;
}
.story-uploader {
  position: absolute;
  top: 70px;
  left: 60px;
  font-size: 20px;
  font-weight: 700;
  color: #111;
  background: rgba(255, 255, 255, 0.85);
  padding: 6px 16px;
  border-radius: 20px;
  z-index: 10;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}
.story-uploader a {
  color: #111;
  text-decoration: none;
  font-weight: 700;
}

/* --- Reactions + Reply --- */
.story-actions {
  position: absolute;
  bottom: 60px;
  width: 100%;
  text-align: center;
}

.reply-container {
  display: flex;
  justify-content: center;
  padding: 0 10px;
  width: 100%;
}

.reply-box {
  position: relative;
  width: 100%;
  max-width: 360px;
}

.reply-box input {
  width: 100%;
  padding: 10px 80px 10px 12px; /* space for Send button */
  border-radius: 6px;
  border: 1px solid #ccc;
  font-size: 16px;
  outline: none;
  font-family: inherit;
  -webkit-user-select: text;
  user-select: text;
  touch-action: manipulation;
  -webkit-touch-callout: none;
  -webkit-text-size-adjust: none;
  -ms-text-size-adjust: none;
}

.reply-box input:focus {
  border-color: navy;
}

.reply-box button {
  position: absolute;
  right: 6px;
  top: 50%;
  transform: translateY(-50%);
  padding: 6px 12px;
  background: navy;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  display: none;
  font-size: 14px;
}

/* Reactions hidden by default */
.reaction-buttons {
  margin-top: 12px;
  display: none;
}

.reaction-buttons.show {
  display: block;
}

.reaction-buttons button {
  font-size: 24px;
  background: none;
  border: none;
  margin: 0 6px;
  color: white;
  cursor: pointer;
  transition: transform 0.2s;
}

.reaction-buttons button:hover {
  transform: scale(1.3);
}

/* Disable zoom on mobile */
input[type="text"] {
  font-size: 16px;
}
.reply-toast {
  position: absolute;
  bottom: 120px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(255, 255, 255, 0.9);
  color: #111;
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: bold;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease, transform 0.3s ease;
  z-index: 20;
}
.reply-toast.show {
  opacity: 1;
  transform: translateX(-50%) translateY(-10px);
}

@media (max-width: 500px) {
  .story-caption {
    font-size: 16px;
    bottom: 140px;
  }

  .reply-box input {
    font-size: 16px;
  }

  .reply-box button {
    font-size: 13px;
  }

  .reaction-buttons button {
    font-size: 22px;
  }
}

/* --- Modal Controls --- */
.close-modal {
  position: absolute;
  top: 10px;
  right: 20px;
  color: white;
  font-size: 24px;
  cursor: pointer;
}
.modal-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  font-size: 36px;
  color: white;
  cursor: pointer;
  user-select: none;
}
.modal-arrow.left {
  left: 10px;
}
.modal-arrow.right {
  right: 10px;
}

</style>
<script>
let isLocked = false;  // üõë Prevent auto story switch when locked

const stories = <%- JSON.stringify(stories) %>;
let currentIndex = 0;
let autoCloseTimeout;

// Auto-open story if ?story=ID
window.addEventListener('DOMContentLoaded', () => {
  const urlParams = new URLSearchParams(window.location.search);
  const targetStoryId = urlParams.get('story');
  if (targetStoryId && Array.isArray(stories)) {
    const index = stories.findIndex(s => s._id === targetStoryId);
    if (index !== -1) {
      setTimeout(() => openStoryModal(index), 300);
    }
  }
});

function handleAddStoryClick() {
  <% if (user) { %>
    document.getElementById('storyFile').click();
  <% } else { %>
    alert('Please log in to upload a story.');
  <% } %>
}

function openStoryModal(index) {
  currentIndex = index;
  const story = stories[currentIndex];
  if (!story) return;

  const modal = document.getElementById('storyModal');
  const modalContent = document.getElementById('modalContent');
  const caption = document.getElementById('storyCaption');
  const uploader = document.getElementById('storyUploader');
  const input = document.getElementById('replyInput');

  // Uploader name
  uploader.innerHTML = `<a href="/user/${story.username}">@${story.username}</a>`;

  // Caption
  caption.textContent = story.caption || '';

  // Media
  const isVideo = /\.(mp4|webm|ogg)$/i.test(story.image);
  modalContent.innerHTML = isVideo
    ? `<video src="${story.image}" controls autoplay playsinline></video>`
    : `<img src="${story.image}" alt="Story">`;

  // Reactions
  const reactionMap = {
    '‚ù§Ô∏è': 'count-heart',
    'üòÇ': 'count-laugh',
    'üò°': 'count-angry',
    'üëç': 'count-like'
  };
  Object.entries(reactionMap).forEach(([emoji, spanId]) => {
    const count = story.reactions?.find(r => r.type === emoji)?.count || 0;
    document.getElementById(spanId).textContent = count;
  });

  // Replies
  const replyBox = document.getElementById('storyReplies');
  if (!story.comments || story.comments.length === 0) {
  replyBox.innerHTML = `<div style="opacity: 0.5;">No replies yet</div>`;
} else {
  replyBox.innerHTML = story.comments
    .slice(-5)
    .map(r => `<div><strong>${r.user}:</strong> ${r.comment}</div>`)
    .join('');
}

  // Focus input listener for pause/resume
  input.removeEventListener('focus', pauseStory);
  input.removeEventListener('blur', resumeStory);
  input.addEventListener('focus', pauseStory);
  input.addEventListener('blur', resumeStory);

  // View notification
  const currentUser = "<%= user?.username %>";
  if (currentUser && currentUser !== story.username && story._id) {
    fetch('/notify-story-view', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ to: story.username, from: currentUser, storyId: story._id })
    }).catch(console.error);
  }

  // Modal display + animation
  document.body.classList.add('modal-open');
  modal.classList.add('show');
  animateProgressBar();
  clearTimeout(autoCloseTimeout);
  autoCloseTimeout = setTimeout(nextStory, 5000);
}
function closeStoryModal() {
  document.body.classList.remove('modal-open');
  const modal = document.getElementById('storyModal');
  modal.classList.remove('show');
  document.getElementById('progressBar').style.transition = 'none';
  document.getElementById('progressBar').style.width = '0%';

  const video = document.querySelector('#modalContent video');
  if (video) video.pause();

  clearTimeout(autoCloseTimeout);
  history.pushState({}, '', '/'); // remove query param
}

function toggleReplyUI() {
  const input = document.getElementById('replyInput');
  const sendBtn = document.getElementById('sendButton');
  const reactions = document.getElementById('reactionButtons');
  const show = input.value.trim().length > 0;

  sendBtn.style.display = show ? 'block' : 'none';
  reactions.classList.toggle('show', show);
}

function pauseStory() {
  const bar = document.getElementById('progressBar');
  bar.style.transition = 'none';
  const width = window.getComputedStyle(bar).width;
  bar.dataset.pausedWidth = width;
  clearTimeout(autoCloseTimeout);
}

function resumeStory() {
  const bar = document.getElementById('progressBar');
  const pausedWidth = parseFloat(bar.dataset.pausedWidth || '0');
  const totalWidth = bar.parentElement.offsetWidth;
  const remainingPercent = 100 - (pausedWidth / totalWidth) * 100;

  requestAnimationFrame(() => {
    bar.style.transition = `width ${remainingPercent * 0.05}s linear`;
    bar.style.width = '100%';
  });

  clearTimeout(autoCloseTimeout);
  autoCloseTimeout = setTimeout(nextStory, remainingPercent * 50);
}

function animateProgressBar() {
  const bar = document.getElementById('progressBar');
  bar.style.transition = 'none';
  bar.style.width = '0%';
  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      bar.style.transition = 'width 5s linear';
      bar.style.width = '100%';
    });
  });
}

function nextStory() {
  if (isLocked) return;  // üõë Don't change stories if locked
  if (currentIndex < stories.length - 1) {
    openStoryModal(currentIndex + 1);
  } else {
    closeStoryModal();
  }
}

function prevStory() {
  if (isLocked) return;  // üõë Same for going back
  if (currentIndex > 0) {
    openStoryModal(currentIndex - 1);
  }
}

function sendReaction(emoji) {
  const story = stories[currentIndex];
  if (!story || !story._id) return;

  fetch(`/stories/${story._id}/react`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ reaction_type: emoji })
  })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        const r = story.reactions.find(r => r.type === emoji);
        if (r) r.count++; else story.reactions.push({ type: emoji, count: 1 });
        const spanId = { '‚ù§Ô∏è': 'count-heart', 'üòÇ': 'count-laugh', 'üò°': 'count-angry', 'üëç': 'count-like' }[emoji];
        document.getElementById(spanId).textContent = story.reactions.find(r => r.type === emoji).count;
      }
    });
}

function submitReply() {
  const inputEl = document.getElementById('replyInput');
  const text = inputEl.value.trim();
  if (!text) return;

  const lockedIndex = currentIndex; // lock the index at moment of send
  const story = stories[lockedIndex];
  if (!story || !story._id) return;

  isReplying = true;
  isLocked = true;
  pauseStory();
  clearTimeout(autoCloseTimeout);

  fetch(`/stories/${story._id}/comment`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ comment: text })
  })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        inputEl.value = '';

        const currentUser = "<%= user?.username %>";
        if (!story.comments) story.comments = [];
        story.comments.push({ user: currentUser, comment: text });

        // ‚¨áÔ∏è Force update reply box manually with full rebuild
        const replyBox = document.getElementById('storyReplies');
        replyBox.innerHTML = story.comments
          .slice(-5)
          .map(r => `<div><strong>${r.user}:</strong> ${r.comment}</div>`)
          .join('');

        // ‚úÖ Show toast
        const toast = document.getElementById('replyToast');
        toast.classList.add('show');
        setTimeout(() => toast.classList.remove('show'), 2000);

        setTimeout(() => {
          isReplying = false;
          isLocked = false;
          resumeStory();
        }, 3000);
      } else {
        isReplying = false;
        isLocked = false;
        alert('Reply failed.');
      }
    })
    .catch(err => {
      isReplying = false;
      isLocked = false;
      console.error('‚ùå Reply error:', err);
      alert('Reply failed.');
    });
}

// Swipe navigation
let touchStartX = null, touchStartY = null;
document.getElementById('storyModal').addEventListener('touchstart', e => {
  touchStartX = e.changedTouches[0].screenX;
  touchStartY = e.changedTouches[0].screenY;
});
document.getElementById('storyModal').addEventListener('touchend', e => {
  if (touchStartX === null) return;
  const dx = e.changedTouches[0].screenX - touchStartX;
  const dy = e.changedTouches[0].screenY - touchStartY;

  if (Math.abs(dy) > Math.abs(dx) && Math.abs(dy) > 50) {
    if (dy > 0) closeStoryModal();
  } else if (Math.abs(dx) > 50) {
    dx < 0 ? nextStory() : prevStory();
  }

  touchStartX = null;
  touchStartY = null;
});

// Tap-to-nav + click-to-close
document.getElementById('storyModal').addEventListener('click', e => {
  const width = window.innerWidth;
  const x = e.clientX;
  if (e.target === e.currentTarget) closeStoryModal();
  else if (x < width / 3) prevStory();
  else if (x > 2 * width / 3) nextStory();
});

// Keyboard
document.addEventListener('keydown', e => {
  if (!document.getElementById('storyModal').classList.contains('show')) return;
  if (e.key === 'Escape') closeStoryModal();
  if (e.key === 'ArrowLeft') prevStory();
  if (e.key === 'ArrowRight') nextStory();
});

// Auto-upload
document.getElementById('storyFile')?.addEventListener('change', function () {
  if (this.files.length) document.getElementById('storyForm').submit();
});
</script>
