<!-- html2canvas CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<style>
  .grid-line {
    position: absolute;
    background: rgba(0,0,0,0.1);
    pointer-events: none;
    z-index: 0;
  }
  @keyframes pulse {
    0% { transform: scale(1); opacity: 0.8; }
    50% { transform: scale(1.4); opacity: 0.4; }
    100% { transform: scale(1); opacity: 0; }
  }
  #tacticalBoard {
    touch-action: none;
  }
</style>

<!-- SVG Arrow Marker -->
<svg height="0" width="0">
  <defs>
    <marker id="arrowhead" markerWidth="6" markerHeight="4" refX="6" refY="2" orient="auto" markerUnits="strokeWidth">
      <polygon points="0 0, 6 2, 0 4" id="arrowHeadShape" fill="white" />
    </marker>
  </defs>
</svg>

<!-- Rotate Warning -->
<div id="rotateWarning" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: #111; color: #fff; align-items: center; justify-content: center; text-align: center; z-index: 99999; font-size: 1.5em; padding: 2em;">
  üì± Please rotate your phone to <b>landscape</b> to use the tactical board.
</div>

<!-- Tactical Modal -->
<div id="tacticalModal" class="hidden auth-modal" onclick="handleModalBackgroundClick(event)" style="overflow-y: auto;">
  <div class="auth-form tactical-inner" style="max-width: 1000px; width: 95%; background: white; position: relative; padding: 1rem; margin: 40px auto;" onclick="event.stopPropagation()">
    <button onclick="closeTacticalBoard()" style="position: fixed; top: 20px; right: 20px; z-index: 10000; font-size: 18px; padding: 8px 12px; background-color: #ccc; border: none; border-radius: 5px; cursor: pointer;">‚úñ Exit</button>

    <h2 style="color: #002147; text-align: center;">Tactical Board</h2>

    <div style="display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 10px; color: #002147; font-weight: bold; justify-content: center;">
      <label>Home Color: <input type="color" id="homeColor" value="#ffffff"></label>
      <label>Away Color: <input type="color" id="awayColor" value="#ff0000"></label>
      <label>Home Template:
        <select id="homeTemplate">
          <option value="442">4-4-2 Classic</option>
          <option value="433">4-3-3 Modern</option>
          <option value="352">3-5-2</option>
          <option value="343">3-4-3</option>
          <option value="451">4-5-1</option>
          <option value="532">5-3-2</option>
          <option value="4231">4-2-3-1</option>
          <option value="4222">4-2-2-2</option>
        </select>
      </label>
      <label>Away Template:
        <select id="awayTemplate">
          <option value="442">4-4-2 Classic</option>
          <option value="433">4-3-3 Modern</option>
          <option value="352">3-5-2</option>
          <option value="343">3-4-3</option>
        </select>
      </label>
      <label>Show Teams:
        <select id="teamDisplay">
          <option value="home">Home Only</option>
          <option value="both">Both Teams</option>
        </select>
      </label>
      <button type="button" onclick="resetPlayers()">Reset</button>
      <button type="button" id="arrowToggleBtn">‚û§ Add Arrow</button>
    </div>

    <div style="text-align: center; margin-bottom: 10px;">
      <button onclick="saveTacticalBoard()" style="padding: 12px 20px; background-color: #28a745; color: white; font-weight: bold; border: none; border-radius: 10px; font-size: 16px; cursor: pointer; margin-right: 10px;">‚úÖ Submit Formation</button>
      <button onclick="clearAllArrows()" style="padding: 12px 20px; background-color: #dc3545; color: white; font-weight: bold; border: none; border-radius: 10px; font-size: 16px; cursor: pointer;">üóëÔ∏è Clear All Arrows</button>
    </div>

    <div id="tacticalBoard" style="position: relative; width: 100%; max-width: 900px; height: 500px; margin: 0 auto; background: url('/images/tactical-pitch.png') center/cover no-repeat; border: 2px solid #333; border-radius: 12px; overflow: hidden;">
      <svg id="arrowLayer" style="position:absolute; top:0; left:0; width:100%; height:100%; pointer-events:none;"></svg>
    </div>

    <button onclick="undoLastArrow()" style="position: absolute; bottom: 10px; left: 10px; padding: 10px 16px; background: #007bff; color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; z-index: 9999;">‚Ü©Ô∏è Undo</button>
    <button onclick="redoLastArrow()" style="position: absolute; bottom: 10px; left: 100px; padding: 10px 16px; background: #6f42c1; color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; z-index: 9999;">‚Ü™Ô∏è Redo</button>
  </div>
</div>

<!-- START SCRIPT LOGIC -->
<script>
// ‚úÖ GLOBAL references declared here (outside DOMContentLoaded)
const board = document.getElementById('tacticalBoard');
const arrowLayer = document.getElementById('arrowLayer');
const homeColorPicker = document.getElementById('homeColor');
const awayColorPicker = document.getElementById('awayColor');
const homeTemplate = document.getElementById('homeTemplate');
const awayTemplate = document.getElementById('awayTemplate');
const teamDisplay = document.getElementById('teamDisplay');
const arrowBtn = document.getElementById('arrowToggleBtn');

let playerElements = [];
let arrowElements = [];
let arrowStart = null;
let liveArrow = null;
let arrowModeEnabled = false;
let undoStack = [];

const templates = {
  '442': ['GK', 'RB', 'CB', 'CB', 'LB', 'RM', 'CM', 'CM', 'LM', 'ST', 'ST'],
  '433': ['GK', 'RB', 'CB', 'CB', 'LB', 'CDM', 'CM', 'CAM', 'RW', 'LW', 'ST'],
  '352': ['GK', 'RCB', 'CB', 'LCB', 'RM', 'CM', 'CM', 'CAM', 'LM', 'ST', 'ST'],
  '343': ['GK', 'RCB', 'CB', 'LCB', 'RM', 'CM', 'CM', 'LM', 'RW', 'LW', 'ST'],
  '451': ['GK', 'RB', 'CB', 'CB', 'LB', 'RM', 'CM', 'CM', 'CM', 'LM', 'ST'],
  '532': ['GK', 'RWB', 'RCB', 'CB', 'LCB', 'LWB', 'CDM', 'CM', 'CM', 'ST', 'ST'],
  '4231': ['GK', 'RB', 'CB', 'CB', 'LB', 'CDM', 'CDM', 'CAM', 'RW', 'LW', 'ST'],
  '4222': ['GK', 'RB', 'CB', 'CB', 'LB', 'CDM', 'CDM', 'CAM', 'CAM', 'ST', 'ST']
};
function openTacticalBoard() {
  const modal = document.getElementById('tacticalModal');
  const isMobile = /Mobi|Android|iPhone/i.test(navigator.userAgent);

  modal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';

  if (isMobile) {
    modal.requestFullscreen?.().then(() => {
      if (screen.orientation?.lock) {
        screen.orientation.lock("landscape").catch(() => {
          showRotateWarning();
        });
      } else {
        showRotateWarning();
      }
    }).catch(() => {
      showRotateWarning();
    });
  }

  teamDisplay.value = 'home';
  resetPlayers();
}

function closeTacticalBoard() {
  const modal = document.getElementById("tacticalModal");
  modal.classList.add('hidden');
  document.exitFullscreen?.();
}

function showRotateWarning() {
  const warning = document.getElementById("rotateWarning");
  if (warning) warning.style.display = "flex";
}
function hideRotateWarning() {
  const warning = document.getElementById("rotateWarning");
  if (warning) warning.style.display = "none";
}
function enforceLandscapeOnly() {
  const isPortrait = window.matchMedia("(orientation: portrait)").matches;
  const warning = document.getElementById("rotateWarning");
  const modal = document.getElementById("tacticalModal");

  if (isPortrait) {
    warning.style.display = "flex";
    modal.classList.add("hidden");
    document.exitFullscreen?.();
  } else {
    warning.style.display = "none";
    modal.classList.remove("hidden");
    modal.requestFullscreen?.();
  }
}
function handleModalBackgroundClick(e) {
  if (e.target === document.getElementById('tacticalModal')) {
    closeTacticalBoard();
  }
}

window.addEventListener("orientationchange", enforceLandscapeOnly);
window.addEventListener("resize", enforceLandscapeOnly);
function snapToGrid(el) {
  const left = parseFloat(el.style.left);
  const top = parseFloat(el.style.top);
  const snappedLeft = Math.round(left / 5) * 5;
  const snappedTop = Math.round(top / 5) * 5;
  el.style.left = `${snappedLeft}%`;
  el.style.top = `${snappedTop}%`;
}

function createPlayer(team, color, label) {
  const el = document.createElement('div');
  el.className = 'tactical-player';
  el.textContent = label;
  Object.assign(el.style, {
    position: 'absolute',
    width: '60px',
    height: '60px',
    borderRadius: '50%',
    backgroundColor: color,
    color: 'black',
    textAlign: 'center',
    lineHeight: '60px',
    cursor: 'move',
    zIndex: 10
  });
  el.draggable = true;
  el.dataset.team = team;

  el.addEventListener('touchstart', (e) => {
    const touch = e.touches[0];
    const offsetX = touch.clientX - el.getBoundingClientRect().left;
    const offsetY = touch.clientY - el.getBoundingClientRect().top;

    const move = moveEvt => {
      const x = moveEvt.touches[0].clientX - board.getBoundingClientRect().left - offsetX;
      const y = moveEvt.touches[0].clientY - board.getBoundingClientRect().top - offsetY;
      el.style.left = `${(x / board.offsetWidth) * 100}%`;
      el.style.top = `${(y / board.offsetHeight) * 100}%`;
    };

    const end = () => {
      board.removeEventListener('touchmove', move);
      board.removeEventListener('touchend', end);
    };

    board.addEventListener('touchmove', move);
    board.addEventListener('touchend', end);
  });

  el.addEventListener('dblclick', () => {
    const name = prompt('Change label:', el.textContent);
    if (name) el.textContent = name;
  });

  el.ondragstart = e => e.dataTransfer.setData('text/plain', playerElements.indexOf(el));
  el.ondragend = () => snapToGrid(el);

  return el;
}

function drawGridLines() {
  const spacing = 5;
  board.querySelectorAll('.grid-line').forEach(line => line.remove());
  for (let i = spacing; i < 100; i += spacing) {
    const v = document.createElement('div');
    Object.assign(v.style, {
      position: 'absolute', left: `${i}%`, top: 0, bottom: 0, width: '1px',
      background: 'rgba(0,0,0,0.1)', pointerEvents: 'none', zIndex: 0
    });
    const h = document.createElement('div');
    Object.assign(h.style, {
      position: 'absolute', top: `${i}%`, left: 0, right: 0, height: '1px',
      background: 'rgba(0,0,0,0.1)', pointerEvents: 'none', zIndex: 0
    });
    board.appendChild(v);
    board.appendChild(h);
  }
}

function resetPlayers() {
  drawGridLines();
  board.querySelectorAll('.tactical-player').forEach(el => el.remove());
  arrowLayer.innerHTML = '';
  playerElements = [];

  if (teamDisplay.value === 'home' || teamDisplay.value === 'both') {
    templates[homeTemplate.value].forEach((label, i) => {
      const el = createPlayer('home', homeColorPicker.value, label);
      el.style.left = `${15 + (i % 4) * 10}%`;
      el.style.top = `${10 + Math.floor(i / 4) * 25}%`;
      board.appendChild(el);
      playerElements.push(el);
    });
  }

  if (teamDisplay.value === 'both') {
    templates[awayTemplate.value].forEach((label, i) => {
      const el = createPlayer('away', awayColorPicker.value, label);
      el.style.left = `${85 - (i % 4) * 10}%`;
      el.style.top = `${10 + Math.floor(i / 4) * 25}%`;
      board.appendChild(el);
      playerElements.push(el);
    });
  }
}
function enableArrowMode() {
  arrowModeEnabled = true;
  arrowBtn.textContent = 'üõë Stop Arrows';
  board.style.cursor = 'crosshair';

  function startArrow(x, y) {
    arrowStart = { x, y };
    const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    liveArrow = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    liveArrow.setAttribute('stroke-width', '2');
    const color = teamDisplay.value === 'home' ? homeColorPicker.value : awayColorPicker.value;
    liveArrow.setAttribute('stroke', color);
    liveArrow.setAttribute('marker-end', 'url(#arrowhead)');
    document.getElementById('arrowHeadShape').setAttribute('fill', color);
    liveArrow.classList.add('user-arrow');
    g.appendChild(liveArrow);
    arrowLayer.appendChild(g);
    arrowElements.push(g);
    g.addEventListener('click', () => {
      if (confirm('Delete this arrow?')) {
        g.remove();
        arrowElements = arrowElements.filter(a => a !== g);
      }
    });
  }

  function draw(x, y) {
    if (!liveArrow || !arrowStart) return;
    liveArrow.setAttribute('x1', arrowStart.x);
    liveArrow.setAttribute('y1', arrowStart.y);
    liveArrow.setAttribute('x2', x);
    liveArrow.setAttribute('y2', y);
  }

  board.onmousedown = e => {
    const rect = board.getBoundingClientRect();
    startArrow(e.clientX - rect.left, e.clientY - rect.top);
    board.onmousemove = evt => {
      const r = board.getBoundingClientRect();
      draw(evt.clientX - r.left, evt.clientY - r.top);
    };
    board.onmouseup = () => {
      board.onmousemove = null;
      board.onmouseup = null;
      if (liveArrow) {
        const x1 = parseFloat(liveArrow.getAttribute('x1'));
        const x2 = parseFloat(liveArrow.getAttribute('x2'));
        const y1 = parseFloat(liveArrow.getAttribute('y1'));
        const y2 = parseFloat(liveArrow.getAttribute('y2'));
        if (Math.abs(x2 - x1) < 5 && Math.abs(y2 - y1) < 5) {
          arrowElements.pop().remove();
        }
      }
      liveArrow = null;
      arrowStart = null;
    };
  };
}

function clearAllArrows() {
  if (confirm('Clear all arrows?')) {
    arrowElements.forEach(el => el.remove());
    arrowElements = [];
  }
}

function saveTacticalBoard() {
  html2canvas(board).then(canvas => {
    const dataUrl = canvas.toDataURL('image/png');
    const blob = dataURLtoBlob(dataUrl);
    const file = new File([blob], `tactic-${Date.now()}.png`, { type: 'image/png' });
    const dt = new DataTransfer();
    dt.items.add(file);
    const input = document.querySelector('input[name="media"]');
    const preview = document.getElementById('mediaPreview');
    if (!input || !preview) return alert('‚ùå Error: Cannot preview or attach');
    input.files = dt.files;
    preview.src = dataUrl;
    preview.style.display = 'block';
    preview.style.maxWidth = '300px';
    preview.style.marginTop = '10px';
    alert('‚úÖ Tactical board attached!');
    closeTacticalBoard();
  });
}

function dataURLtoBlob(dataurl) {
  const parts = dataurl.split(',');
  const mime = parts[0].match(/:(.*?);/)[1];
  const bstr = atob(parts[1]);
  const u8arr = new Uint8Array(bstr.length);
  for (let i = 0; i < bstr.length; i++) u8arr[i] = bstr.charCodeAt(i);
  return new Blob([u8arr], { type: mime });
}

// Arrow button
arrowBtn.addEventListener('click', () => {
  if (!arrowModeEnabled) {
    enableArrowMode();
  } else {
    arrowModeEnabled = false;
    arrowBtn.textContent = '‚û§ Add Arrow';
    board.style.cursor = 'default';
    board.onmousedown = null;
  }
});

// Color/template change
homeColorPicker.addEventListener('input', () => updateTeamColor('home', homeColorPicker.value));
awayColorPicker.addEventListener('input', () => updateTeamColor('away', awayColorPicker.value));
homeTemplate.addEventListener('change', resetPlayers);
awayTemplate.addEventListener('change', resetPlayers);
teamDisplay.addEventListener('change', resetPlayers);

// Global access
window.openTacticalBoard = openTacticalBoard;
window.closeTacticalBoard = closeTacticalBoard;
window.saveTacticalBoard = saveTacticalBoard;
window.clearAllArrows = clearAllArrows;
window.resetPlayers = resetPlayers;
window.handleModalBackgroundClick = handleModalBackgroundClick;

// Optional: trigger via button
document.addEventListener('DOMContentLoaded', () => {
  const btn = document.getElementById('openTacticalBoardBtn');
  if (btn) {
    btn.addEventListener('click', () => {
      if (typeof window.openTacticalBoard === 'function') {
        window.openTacticalBoard();
      } else {
        alert('‚ö†Ô∏è Tactical board script not ready yet.');
      }
    });
  }
});
</script>
