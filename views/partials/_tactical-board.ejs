<!-- Tactical Board Modal -->
<div id="tacticalModal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.95); justify-content: center; align-items: center; z-index: 9999; overflow: hidden;">
  <div style="background: white; border-radius: 20px; padding: 1rem; width: 90vw; height: 90vh; max-width: 1200px; max-height: 800px; margin: auto; display: flex; flex-direction: row; flex-wrap: wrap; gap: 1rem; box-sizing: border-box;">
    <!-- Left panel: controls -->
    <div style="flex: 1; min-width: 200px; display: flex; flex-direction: column; gap: 15px;">
      <h3>Formation</h3>
      <select onchange="loadFormation(this.value)">
        <option value="433">4-3-3</option>
        <option value="433f9">4-3-3 False 9</option>
        <option value="442">4-4-2</option>
        <option value="4231">4-2-3-1</option>
        <option value="532">5-3-2</option>
        <option value="523">5-2-3</option>
      </select>

      <h3>Color</h3>
      <input type="color" id="teamColorPicker" onchange="changeTeamColor(this.value)" value="#007BFF" />

      <button onclick="toggleArrowMode()">ðŸ¡’ Arrow Mode: <span id='arrowModeStatus'>Off</span></button>
      <button id="nameModeBtn" onclick="toggleNamingMode()">âœŽ Add Playerâ€™s Name: <span id="namingModeStatus">Off</span></button>
      <h3>Text Color</h3>
      <select id="textColorPicker" onchange="changeTextColor(this.value)">
        <option value="white" selected>White</option>
        <option value="black">Black</option>
      </select>

      <button onclick="undo()">Undo</button>
      <button onclick="redo()">Redo</button>
      <button onclick="submitTactics()">Submit</button>
      <button onclick="closeTacticalBoard()">Exit</button>
    </div>

    <!-- Right panel: canvas -->
    <div style="flex: 3; position: relative;">
      <canvas id="tacticalCanvas" style="width: 100%; height: 100%; border: 2px solid #000; border-radius: 12px;"></canvas>
      <input id="nameInput" type="text" placeholder="Enter name" style="
        position: absolute;
        pointer-events: auto;
        display: none;
        z-index: 10001;
        font-size: 16px;
        padding: 5px 8px;
        border: 1px solid #aaa;
        border-radius: 6px;
        background: white;
      " />
    </div>
  </div>
</div>

<script>
let draggedPlayer = null;
let dragOffsetX = 0;
let dragOffsetY = 0;
let undoStack = [];
let redoStack = [];
let playerColor = '#007BFF';
let tacticalBoardActivated = false;
let arrowMode = false;
let arrows = [];
let arrowStart = null;
let tempArrowEnd = null; // for in-progress arrow drawing
let namingMode = false;
let playerNameColor = 'white';
let canvas, ctx;
const players = [];
let currentFormationCode = '433';

// Add this pitch image here:
const pitchImage = new Image();
pitchImage.src = '/images/tactical-pitch.png';

pitchImage.onload = () => {
  if (canvas && ctx) drawPlayers();
};

function captureState() {
  return {
    players: players.map(p => ({ ...p })),
    arrows: arrows.map(a => ({
      start: { ...a.start },
      end: { ...a.end }
    }))
  };
}

function changeTeamColor(color) {
  playerColor = color;
  drawPlayers();
}

function toggleNamingMode() {
  namingMode = !namingMode;
  document.getElementById('namingModeStatus').innerText = namingMode ? 'On' : 'Off';

  if (namingMode) {
    alert("Naming mode ON: Click a player to set a name.");
  }
}

function changeTextColor(color) {
  playerNameColor = color;
  drawPlayers();
}

function toggleArrowMode() {
  arrowMode = !arrowMode;
  document.getElementById('arrowModeStatus').innerText = arrowMode ? 'On' : 'Off';
}

function drawArrow(start, end) {
  const headlen = 15;
  const dx = end.x - start.x;
  const dy = end.y - start.y;
  const angle = Math.atan2(dy, dx);

  ctx.strokeStyle = 'red';
  ctx.lineWidth = 4;
  ctx.beginPath();
  ctx.moveTo(start.x, start.y);
  ctx.lineTo(end.x, end.y);
  ctx.stroke();

  // Arrowhead
  ctx.beginPath();
  ctx.moveTo(end.x, end.y);
  ctx.lineTo(end.x - headlen * Math.cos(angle - Math.PI / 6), end.y - headlen * Math.sin(angle - Math.PI / 6));
  ctx.lineTo(end.x - headlen * Math.cos(angle + Math.PI / 6), end.y - headlen * Math.sin(angle + Math.PI / 6));
  ctx.lineTo(end.x, end.y);
  ctx.fillStyle = 'red';
  ctx.fill();
}

function drawPlayers() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  if (pitchImage.complete && pitchImage.naturalWidth !== 0) {
    ctx.drawImage(pitchImage, 0, 0, canvas.width, canvas.height);
  } else {
    ctx.fillStyle = '#2c6f2c';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  }

  arrows.forEach(arrow => drawArrow(arrow.start, arrow.end));
  if (arrowStart && tempArrowEnd) {
    drawArrow(arrowStart, tempArrowEnd);
  }

  players.forEach(p => {
    ctx.beginPath();
    ctx.arc(p.x, p.y, 30, 0, Math.PI * 2);
    ctx.fillStyle = playerColor;
    ctx.fill();
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.fillStyle = playerNameColor;
    ctx.font = 'bold 16px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(p.name || p.label, p.x, p.y);
  });
}

function resizeCanvas() {
  if (!canvas) return;
  // Reset transform before resizing to avoid scale compounding
  ctx.setTransform(1, 0, 0, 1, 0, 0);

  // Set canvas size to actual pixel size of its container
  canvas.width = canvas.clientWidth * window.devicePixelRatio;
  canvas.height = canvas.clientHeight * window.devicePixelRatio;

  ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
  drawPlayers();
}

window.addEventListener('resize', () => {
  if (tacticalBoardActivated) resizeCanvas();
});

window.addEventListener('orientationchange', () => {
  if (tacticalBoardActivated) setTimeout(resizeCanvas, 300);
});

function undo() {
  if (undoStack.length <= 1) return;
  redoStack.push(captureState());
  undoStack.pop();
  const prev = undoStack[undoStack.length - 1];
  players.length = 0;
  players.push(...prev.players.map(p => ({ ...p })));
  arrows.length = 0;
  arrows.push(...prev.arrows.map(a => ({
    start: { ...a.start },
    end: { ...a.end }
  })));
  drawPlayers();
}

function redo() {
  if (redoStack.length === 0) return;
  undoStack.push(captureState());
  const next = redoStack.pop();
  players.length = 0;
  players.push(...next.players.map(p => ({ ...p })));
  arrows.length = 0;
  arrows.push(...next.arrows.map(a => ({
    start: { ...a.start },
    end: { ...a.end }
  })));
  drawPlayers();
}

function loadFormation(code) {
  const midY = canvas.height / 2;
  const lineX = [60, 180, 300, 420, 540, 660, 780];
  if (players.length > 0) undoStack.push(captureState());
  redoStack.length = 0;
  players.length = 0;
  currentFormationCode = code;

  const formations = {
    '433': [
      ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
      ['CM', 3, -100], ['CDM', 2, 0], ['CM', 3, 100],
      ['LW', 4, -150], ['RW', 4, 150], ['ST', 5, 0]
    ],
    '433f9': [
      ['GK', 0, 0], ['LB', 2, -170], ['LCB', 1, -60], ['RCB', 1, 60], ['RB', 2, 170],
      ['CM', 3, -100], ['CDM', 2, 0], ['CM', 3, 100],
      ['LW', 5, -130], ['RW', 5, 130], ['False 9', 4, 0]
    ],
    '442': [
      ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
      ['LM', 4, -170], ['CDM', 3, -60], ['CDM', 3, 60], ['RM', 4, 170],
      ['ST', 5, -60], ['ST', 5, 60]
    ],
    '4231': [
      ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
      ['CDM', 3, -60], ['CDM', 3, 60], ['CAM', 4, 0],
      ['LM', 4, -170], ['RM', 4, 170], ['ST', 5, 0]
    ],
    '532': [
      ['GK', 0, 0], ['LWB', 3, -190], ['LCB', 2, -110], ['CB', 1, 0], ['RCB', 2, 110], ['RWB', 3, 190],
      ['CM', 4, -110], ['CDM', 3, 0], ['CM', 4, 110], ['ST', 5, -60], ['ST', 5, 60]
    ],
    '523': [
      ['GK', 0, 0], ['LWB', 3, -190], ['LCB', 2, -110], ['CB', 1, 0], ['RCB', 2, 110], ['RWB', 3, 190],
      ['CM', 3, -70], ['CM', 3, 70], ['LW', 4, -120], ['RW', 4, 120], ['ST', 5, 0]
    ]
  };

  formations[code].forEach(([label, xIdx, yOffset]) =>
    players.push({ x: lineX[xIdx], y: midY + yOffset, label })
  );
  drawPlayers();
}

function setupDragListeners() {
  if (!canvas) return;

  // Helper to get touch coordinates relative to canvas, similar to mouse event coords
  function getTouchPos(touchEvent) {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const touch = touchEvent.touches[0] || touchEvent.changedTouches[0];
    return {
      x: (touch.clientX - rect.left) * scaleX,
      y: (touch.clientY - rect.top) * scaleY,
    };
  }

  // MOUSE EVENTS (existing)
  canvas.addEventListener('mousedown', e => {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const mx = (e.clientX - rect.left) * scaleX;
    const my = (e.clientY - rect.top) * scaleY;

    if (arrowMode) {
      arrowStart = { x: mx, y: my };
      return;
    }

    if (namingMode) {
      for (let p of players) {
        if (Math.hypot(mx - p.x, my - p.y) < 30) {
          setTimeout(() => {
            const input = document.getElementById('nameInput');
            if (!input) return;

            const inputWidth = 120;
            const inputHeight = 30;

            const canvasContainer = canvas.parentElement;
            const scaleX = canvasContainer.clientWidth / canvas.width;
            const scaleY = canvasContainer.clientHeight / canvas.height;

            const screenX = p.x * scaleX;
            const screenY = p.y * scaleY;

            input.style.left = `${screenX - inputWidth / 2}px`;
            input.style.top = `${screenY - inputHeight - 10}px`;
            input.style.width = inputWidth + 'px';
            input.style.height = inputHeight + 'px';

            input.style.display = 'block';
            input.value = p.name || '';
            input.focus();

            input.onkeydown = ev => {
              if (ev.key === 'Enter') {
                p.name = input.value.trim();
                input.style.display = 'none';
                drawPlayers();
                undoStack.push(captureState());
                redoStack = [];
              } else if (ev.key === 'Escape') {
                input.style.display = 'none';
              }
            };
          }, 10);
          return;
        }
      }
      return;
    }

    for (let p of players) {
      if (Math.hypot(mx - p.x, my - p.y) < 30) {
        draggedPlayer = p;
        dragOffsetX = mx - p.x;
        dragOffsetY = my - p.y;
        break;
      }
    }
  });

  canvas.addEventListener('mousemove', e => {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const mx = (e.clientX - rect.left) * scaleX;
    const my = (e.clientY - rect.top) * scaleY;

    if (arrowMode && arrowStart) {
      tempArrowEnd = { x: mx, y: my };
      drawPlayers();
      return;
    }

    if (draggedPlayer) {
      draggedPlayer.x = mx - dragOffsetX;
      draggedPlayer.y = my - dragOffsetY;
      drawPlayers();
    }
  });

  canvas.addEventListener('mouseup', e => {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const mx = (e.clientX - rect.left) * scaleX;
    const my = (e.clientY - rect.top) * scaleY;

    if (arrowMode && arrowStart) {
      arrows.push({ start: arrowStart, end: { x: mx, y: my } });
      arrowStart = null;
      tempArrowEnd = null;
      undoStack.push(captureState());
      redoStack = [];
      drawPlayers();
    }

    if (draggedPlayer) {
      draggedPlayer = null;
      undoStack.push(captureState());
      redoStack = [];
    }
  });

  canvas.addEventListener('mouseleave', () => {
    if (arrowStart) arrowStart = null;
    if (draggedPlayer) {
      draggedPlayer = null;
      undoStack.push(captureState());
      redoStack = [];
    }
  });

  // TOUCH EVENTS - new handlers mirroring mouse logic

  canvas.addEventListener('touchstart', e => {
    e.preventDefault(); // Prevent scrolling while interacting
    const { x: tx, y: ty } = getTouchPos(e);

    if (arrowMode) {
      arrowStart = { x: tx, y: ty };
      return;
    }

    if (namingMode) {
      for (let p of players) {
        if (Math.hypot(tx - p.x, ty - p.y) < 30) {
          setTimeout(() => {
            const input = document.getElementById('nameInput');
            if (!input) return;

            const inputWidth = 120;
            const inputHeight = 30;

            const canvasContainer = canvas.parentElement;
            const scaleX = canvasContainer.clientWidth / canvas.width;
            const scaleY = canvasContainer.clientHeight / canvas.height;

            const screenX = p.x * scaleX;
            const screenY = p.y * scaleY;

            input.style.left = `${screenX - inputWidth / 2}px`;
            input.style.top = `${screenY - inputHeight - 10}px`;
            input.style.width = inputWidth + 'px';
            input.style.height = inputHeight + 'px';

            input.style.display = 'block';
            input.value = p.name || '';
            input.focus();

            input.onkeydown = ev => {
              if (ev.key === 'Enter') {
                p.name = input.value.trim();
                input.style.display = 'none';
                drawPlayers();
                undoStack.push(captureState());
                redoStack = [];
              } else if (ev.key === 'Escape') {
                input.style.display = 'none';
              }
            };
          }, 10);
          return;
        }
      }
      return;
    }

    for (let p of players) {
      if (Math.hypot(tx - p.x, ty - p.y) < 30) {
        draggedPlayer = p;
        dragOffsetX = tx - p.x;
        dragOffsetY = ty - p.y;
        break;
      }
    }
  }, { passive: false });

  canvas.addEventListener('touchmove', e => {
    e.preventDefault();
    if (!draggedPlayer && !arrowMode) return;

    const { x: tx, y: ty } = getTouchPos(e);

    if (arrowMode && arrowStart) {
      tempArrowEnd = { x: tx, y: ty };
      drawPlayers();
      return;
    }

    if (draggedPlayer) {
      draggedPlayer.x = tx - dragOffsetX;
      draggedPlayer.y = ty - dragOffsetY;
      drawPlayers();
    }
  }, { passive: false });

  canvas.addEventListener('touchend', e => {
    e.preventDefault();
    if (arrowMode && arrowStart) {
      const { x: tx, y: ty } = getTouchPos(e);
      arrows.push({ start: arrowStart, end: { x: tx, y: ty } });
      arrowStart = null;
      tempArrowEnd = null;
      undoStack.push(captureState());
      redoStack = [];
      drawPlayers();
    }

    if (draggedPlayer) {
      draggedPlayer = null;
      undoStack.push(captureState());
      redoStack = [];
    }
  }, { passive: false });

  canvas.addEventListener('touchcancel', e => {
    e.preventDefault();
    if (arrowStart) arrowStart = null;
    if (draggedPlayer) {
      draggedPlayer = null;
      undoStack.push(captureState());
      redoStack = [];
    }
  }, { passive: false });
}

function openTacticalBoard() {
  tacticalBoardActivated = true;
  const modal = document.getElementById('tacticalModal');
  modal.style.display = 'flex';

  setTimeout(() => {
    canvas = document.getElementById('tacticalCanvas');
    ctx = canvas.getContext('2d');

    resizeCanvas(); // << important call here

    if (undoStack.length === 0) {
      loadFormation('433');
      undoStack.push(captureState());
    } else {
      players.length = 0;
      const last = undoStack[undoStack.length - 1];
      players.push(...last.players.map(p => ({ ...p })));
      arrows.push(...last.arrows.map(a => ({
        start: { ...a.start },
        end: { ...a.end }
      })));
    }

    redoStack = [];
    drawPlayers();
    setupDragListeners();
    document.querySelector('#teamColorPicker').disabled = false;
  }, 10);
}

function closeTacticalBoard() {
  tacticalBoardActivated = false;
  document.getElementById('tacticalModal').style.display = 'none';
}

function submitTactics() {
  drawPlayers();

  canvas.toBlob(blob => {
    const tacticInput = document.getElementById('tacticImageInput');
    const dt = new DataTransfer();
    dt.items.add(new File([blob], 'tactic.png', { type: 'image/png' }));
    tacticInput.files = dt.files;

    let preview = document.getElementById('tacticImagePreview');
    if (!preview) {
      const img = document.createElement('img');
      img.id = 'tacticImagePreview';
      img.style.maxWidth = '200px';
      img.style.marginTop = '10px';
      img.style.borderRadius = '12px';
      img.style.display = 'block';

      const commentText = document.getElementById('commentText');
      commentText.parentNode.insertBefore(img, commentText.nextSibling);

      preview = img;
    }

    if (preview.src) {
      URL.revokeObjectURL(preview.src);
    }

    const url = URL.createObjectURL(blob);
    preview.src = url;
    preview.style.display = 'block';

    closeTacticalBoard();
    alert('Tactic image attached to your comment!');
  });
}

document.addEventListener('DOMContentLoaded', () => {
  const btn = document.getElementById('openTacticalBoardBtn');
  if (btn) {
    btn.addEventListener('click', e => {
      if (typeof isLoggedIn !== 'undefined' && !isLoggedIn) {
        e.preventDefault();
        document.getElementById('unauthMessage').classList.remove('hidden');
        btn.classList.add('shake');
        setTimeout(() => btn.classList.remove('shake'), 500);
      } else {
        openTacticalBoard();
      }
    });
  }
});
</script>
