<!-- Rotate Warning -->
<div id="rotateWarning" style="display: none; position: fixed; z-index: 10000; top: 0; left: 0; width: 100vw; height: 100vh; background: black; color: white; justify-content: center; align-items: center; font-size: 2rem; text-align: center; padding: 2rem;">
  ⚠️ Please rotate your device to <strong>landscape</strong> to use the tactical board.
</div>

<!-- Tactical Board Modal -->
<div id="tacticalModal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.95); justify-content: center; align-items: center; z-index: 9999; overflow: hidden;">
  <div style="background: white; border-radius: 20px; padding: 1rem; width: 100vw; height: 100vh; display: flex; flex-direction: row; flex-wrap: wrap; gap: 1rem; box-sizing: border-box;">
    <!-- Left panel: controls -->
    <div style="flex: 1; min-width: 200px; display: flex; flex-direction: column; gap: 15px;">
      <h3>Formation</h3>
      <select onchange="loadFormation(this.value)">
        <option value="433">4-3-3</option>
        <option value="433f9">4-3-3 False 9</option>
        <option value="442">4-4-2</option>
        <option value="4231">4-2-3-1</option>
        <option value="532">5-3-2</option>
        <option value="523">5-2-3</option>
      </select>

      <h3>Color</h3>
      <input type="color" id="teamColorPicker" onchange="changeTeamColor(this.value)" value="#007BFF" />

      <button onclick="undo()">Undo</button>
      <button onclick="redo()">Redo</button>
      <button onclick="submitTactics()">Submit</button>
      <button onclick="closeTacticalBoard()">Exit</button>
    </div>

    <!-- Right panel: canvas -->
    <div style="flex: 3; position: relative;">
      <canvas id="tacticalCanvas" style="width: 100%; height: 100%; border: 2px solid #000; border-radius: 12px;"></canvas>
    </div>
  </div>
</div>

<script>
let draggedPlayer = null;
let dragOffsetX = 0;
let dragOffsetY = 0;
let undoStack = [];
let redoStack = [];
let playerColor = '#007BFF';
let tacticalBoardActivated = false;
let canvas, ctx;
const players = [];
let currentFormationCode = '433';

function clonePlayers(arr) {
  return arr.map(p => ({ ...p }));
}

function changeTeamColor(color) {
  playerColor = color;
  drawPlayers();
}

function drawPlayers() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  players.forEach(p => {
    ctx.beginPath();
    ctx.arc(p.x, p.y, 30, 0, Math.PI * 2);
    ctx.fillStyle = playerColor;
    ctx.fill();
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.fillStyle = 'white';
    ctx.font = 'bold 16px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(p.label, p.x, p.y);
  });
}

function undo() {
  if (undoStack.length <= 1) return;
  redoStack.push(clonePlayers(players));
  undoStack.pop();
  const prev = undoStack[undoStack.length - 1];
  players.length = 0;
  players.push(...clonePlayers(prev));
  drawPlayers();
}

function redo() {
  if (redoStack.length === 0) return;
  undoStack.push(clonePlayers(players));
  const next = redoStack.pop();
  players.length = 0;
  players.push(...next);
  drawPlayers();
}

function loadFormation(code) {
  const midY = canvas.height / 2;
  const lineX = [60, 180, 300, 420, 540, 660, 780];
  if (players.length > 0) undoStack.push(clonePlayers(players));
  redoStack.length = 0;
  players.length = 0;
  currentFormationCode = code;

  const formations = {
    '433': [
      ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
      ['CM', 3, -100], ['CDM', 2, 0], ['CM', 3, 100],
      ['LW', 4, -150], ['RW', 4, 150], ['ST', 5, 0]
    ],
    '433f9': [
      ['GK', 0, 0], ['LB', 2, -170], ['LCB', 1, -60], ['RCB', 1, 60], ['RB', 2, 170],
      ['CM', 3, -100], ['CDM', 2, 0], ['CM', 3, 100],
      ['LW', 5, -130], ['RW', 5, 130], ['False 9', 4, 0]
    ],
    '442': [
      ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
      ['LM', 4, -170], ['CDM', 3, -60], ['CDM', 3, 60], ['RM', 4, 170],
      ['ST', 5, -60], ['ST', 5, 60]
    ],
    '4231': [
      ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
      ['CDM', 3, -60], ['CDM', 3, 60], ['CAM', 4, 0],
      ['LM', 4, -170], ['RM', 4, 170], ['ST', 5, 0]
    ],
    '532': [
      ['GK', 0, 0], ['LWB', 3, -190], ['LCB', 2, -110], ['CB', 1, 0], ['RCB', 2, 110], ['RWB', 3, 190],
      ['CM', 4, -110], ['CDM', 3, 0], ['CM', 4, 110], ['ST', 5, -60], ['ST', 5, 60]
    ],
    '523': [
      ['GK', 0, 0], ['LWB', 3, -190], ['LCB', 2, -110], ['CB', 1, 0], ['RCB', 2, 110], ['RWB', 3, 190],
      ['CM', 3, -70], ['CM', 3, 70], ['LW', 4, -120], ['RW', 4, 120], ['ST', 5, 0]
    ]
  };

  formations[code].forEach(([label, xIdx, yOffset]) =>
    players.push({ x: lineX[xIdx], y: midY + yOffset, label })
  );
  drawPlayers();
}

function setupDragListeners() {
  if (!canvas) return;
  canvas.addEventListener('mousedown', e => {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const mx = (e.clientX - rect.left) * scaleX;
    const my = (e.clientY - rect.top) * scaleY;

    for (let p of players) {
      if (Math.hypot(mx - p.x, my - p.y) < 30) {
        draggedPlayer = p;
        dragOffsetX = mx - p.x;
        dragOffsetY = my - p.y;
        break;
      }
    }
  });

  canvas.addEventListener('mousemove', e => {
    if (!draggedPlayer) return;
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    const mx = (e.clientX - rect.left) * scaleX;
    const my = (e.clientY - rect.top) * scaleY;
    draggedPlayer.x = mx - dragOffsetX;
    draggedPlayer.y = my - dragOffsetY;
    drawPlayers();
  });

  ['mouseup', 'mouseleave'].forEach(evt =>
    canvas.addEventListener(evt, () => {
      if (draggedPlayer) {
        draggedPlayer = null;
        undoStack.push(clonePlayers(players));
        redoStack = [];
      }
    })
  );
}

function showRotateWarning() {
  document.getElementById('rotateWarning').style.display = 'flex';
}
function hideRotateWarning() {
  document.getElementById('rotateWarning').style.display = 'none';
}

function checkOrientationAndOpen() {
  const isPortrait = window.matchMedia('(orientation: portrait)').matches;
  if (isPortrait) {
    showRotateWarning();
  } else {
    hideRotateWarning();
    openTacticalBoard();
  }
}

window.addEventListener('orientationchange', () => {
  if (!tacticalBoardActivated) return;
  checkOrientationAndOpen();
});

function openTacticalBoard() {
  tacticalBoardActivated = true;
  const modal = document.getElementById('tacticalModal');
  modal.style.display = 'flex';

  setTimeout(() => {
    canvas = document.getElementById('tacticalCanvas');
    ctx = canvas.getContext('2d');
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    if (undoStack.length === 0) {
      loadFormation('433');
      undoStack.push(clonePlayers(players));
    } else {
      players.length = 0;
      players.push(...clonePlayers(undoStack[undoStack.length - 1]));
    }

    redoStack = [];
    drawPlayers();
    setupDragListeners();
    document.querySelector('#teamColorPicker').disabled = false;
  }, 10);
}

function closeTacticalBoard() {
  tacticalBoardActivated = false;
  document.getElementById('tacticalModal').style.display = 'none';
  hideRotateWarning();
}

function submitTactics() {
  canvas.toBlob(blob => {
    const tacticInput = document.getElementById('tacticImageInput');
    const dt = new DataTransfer();
    dt.items.add(new File([blob], 'tactic.png', { type: 'image/png' }));
    tacticInput.files = dt.files;
    closeTacticalBoard();
    alert('Tactic image attached to your comment!');
  });
}

document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('rotateWarning').style.display = 'none';

  const btn = document.getElementById('openTacticalBoardBtn');
  if (btn) {
    btn.addEventListener('click', e => {
      if (typeof isLoggedIn !== 'undefined' && !isLoggedIn) {
        e.preventDefault();
        document.getElementById('unauthMessage').classList.remove('hidden');
        btn.classList.add('shake');
        setTimeout(() => btn.classList.remove('shake'), 500);
      } else {
        checkOrientationAndOpen();
      }
    });
  }
});
</script>
