<div id="tacticalModal" class="hidden auth-modal" onclick="handleModalBackgroundClick(event)">
  <div class="auth-form tactical-inner" style="max-width: 1000px; width: 95%; background: white; position: relative; padding: 1rem;" onclick="event.stopPropagation()">
    <h2 style="color: #002147;">Tactical Board</h2>

    <div style="display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 10px; color: #002147; font-weight: bold;">
      <label>Home Team: <input type="text" id="homeTeamName" value="Home FC"></label>
      <label>Away Team: <input type="text" id="awayTeamName" value="Away FC"></label>

      <label>Home Color: <input type="color" id="homeColor" value="#0000ff"></label>
      <label>Away Color: <input type="color" id="awayColor" value="#ff0000"></label>

      <label>Home Template:
        <select id="homeTemplate">
          <option value="442">4-4-2 Classic</option>
          <option value="433">4-3-3 Modern</option>
          <option value="352">3-5-2</option>
          <option value="343">3-4-3</option>
        </select>
      </label>

      <label>Away Template:
        <select id="awayTemplate">
          <option value="442">4-4-2 Classic</option>
          <option value="433">4-3-3 Modern</option>
          <option value="352">3-5-2</option>
          <option value="343">3-4-3</option>
        </select>
      </label>

      <label>Show Teams:
        <select id="teamDisplay">
          <option value="both">Both Teams</option>
          <option value="home">Home Only</option>
        </select>
      </label>

      <button type="button" onclick="resetPlayers()">Reset</button>
    </div>

    <div style="display: flex; justify-content: space-between; margin: 10px 0; font-size: 18px; font-weight: bold; color: #002147;">
      <strong id="homeTeamLabel">Home FC</strong>
      <strong id="awayTeamLabel">Away FC</strong>
    </div>

    <div id="tacticalBoard" style="
      position: relative;
      width: 100%;
      max-width: 900px;
      height: 500px;
      margin: 0 auto;
      background: url('/images/tactical-pitch.png') center/cover no-repeat;
      border: 2px solid #333;
      border-radius: 12px;
      overflow: hidden;
    ">
      <div style="
        position: absolute;
        bottom: 10px;
        right: 10px;
        z-index: 99;
        display: flex;
        gap: 10px;
      ">
        <button onclick="saveTacticalBoard()">✅ Attach</button>
        <button onclick="closeTacticalBoard()">✖ Exit</button>
      </div>
    </div>
  </div>
</div>

<div id="imageModal" class="hidden" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.8); display: flex; justify-content: center; align-items: center; z-index: 9999;">
  <img id="modalImage" src="" style="max-width: 90%; max-height: 90%; border-radius: 10px; box-shadow: 0 0 20px black;" />
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script>
  const tacticalModal = document.getElementById('tacticalModal');
  const board = document.getElementById('tacticalBoard');
  const homeColorPicker = document.getElementById('homeColor');
  const awayColorPicker = document.getElementById('awayColor');
  const homeTeamInput = document.getElementById('homeTeamName');
  const awayTeamInput = document.getElementById('awayTeamName');
  const homeTeamLabel = document.getElementById('homeTeamLabel');
  const awayTeamLabel = document.getElementById('awayTeamLabel');
  const homeTemplate = document.getElementById('homeTemplate');
  const awayTemplate = document.getElementById('awayTemplate');
  const teamDisplay = document.getElementById('teamDisplay');

  let playerElements = [];

  const templates = {
    '442': ['GK', 'RB', 'CB', 'CB', 'LB', 'RM', 'CM', 'CM', 'LM', 'ST', 'ST'],
    '433': ['GK', 'RB', 'CB', 'CB', 'LB', 'CDM', 'CM', 'CAM', 'RW', 'LW', 'ST'],
    '352': ['GK', 'RCB', 'CB', 'LCB', 'RM', 'CM', 'CM', 'CAM', 'LM', 'ST', 'ST'],
    '343': ['GK', 'RCB', 'CB', 'LCB', 'RM', 'CM', 'CM', 'LM', 'RW', 'LW', 'ST']
  };

  function openTacticalBoard() {
    tacticalModal.classList.remove('hidden');
    resetPlayers();
  }

  function closeTacticalBoard() {
    tacticalModal.classList.add('hidden');
  }

  function handleModalBackgroundClick(e) {
    if (e.target === tacticalModal) closeTacticalBoard();
  }

  function resetPlayers() {
    board.querySelectorAll('.tactical-player').forEach(el => el.remove());
    playerElements = [];

    homeTeamLabel.textContent = homeTeamInput.value;
    awayTeamLabel.textContent = awayTeamInput.value;

    if (teamDisplay.value === 'home' || teamDisplay.value === 'both') {
      addTeamPlayers('home', homeColorPicker.value, templates[homeTemplate.value]);
    }
    if (teamDisplay.value === 'both') {
      addTeamPlayers('away', awayColorPicker.value, templates[awayTemplate.value]);
    }
  }

  function addTeamPlayers(team, color, labels) {
    labels.forEach((label, i) => {
      const el = createPlayer(team, color, label);
      const top = team === 'home' ? 80 - (i * 5) : 10 + (i * 5);
      const left = 10 + (i * 7) % 80;

      el.style.top = `${top}%`;
      el.style.left = `${left}%`;

      board.appendChild(el);
      playerElements.push(el);
    });
  }

  function createPlayer(team, color, label) {
    const el = document.createElement('div');
    el.className = 'tactical-player';
    el.textContent = label;
    el.style.position = 'absolute';
    el.style.width = '60px';
    el.style.height = '60px';
    el.style.borderRadius = '50%';
    el.style.backgroundColor = color;
    el.style.color = 'black';
    el.style.textAlign = 'center';
    el.style.lineHeight = '60px';
    el.style.cursor = 'move';
    el.draggable = true;
    el.dataset.team = team;

    el.addEventListener('dblclick', () => {
      const name = prompt('Change label:', el.textContent);
      if (name) el.textContent = name;
    });

    el.ondragstart = e => {
      e.dataTransfer.setData('text/plain', playerElements.indexOf(el));
    };

    return el;
  }

  board.ondragover = e => e.preventDefault();
  board.ondrop = e => {
    e.preventDefault();
    const idx = e.dataTransfer.getData('text/plain');
    const el = playerElements[idx];
    const rect = board.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    el.style.left = `${x}%`;
    el.style.top = `${y}%`;
  };

  function updateTeamColor(team, color) {
    playerElements.forEach(p => {
      if (p.dataset.team === team) p.style.backgroundColor = color;
    });
  }

  homeColorPicker.addEventListener('input', () => updateTeamColor('home', homeColorPicker.value));
  awayColorPicker.addEventListener('input', () => updateTeamColor('away', awayColorPicker.value));
  homeTemplate.addEventListener('change', resetPlayers);
  awayTemplate.addEventListener('change', resetPlayers);
  teamDisplay.addEventListener('change', resetPlayers);

  function saveTacticalBoard() {
    html2canvas(document.getElementById('tacticalBoard')).then(canvas => {
      canvas.toBlob(blob => {
        if (!blob) {
          alert("❌ Failed to generate image.");
          return;
        }

        const file = new File([blob], `tactic-${Date.now()}.png`, { type: 'image/png' });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);

        const tacticInput = document.querySelector('input[name="tacticImage"]');
        if (!tacticInput) {
          alert("❌ Couldn't find tacticImage input.");
          return;
        }

        tacticInput.files = dataTransfer.files;
        alert("✅ Tactical board attached successfully!");
        closeTacticalBoard();
      }, 'image/png');
    });
  }

  // Enlarged modal preview
  document.addEventListener('click', function(e) {
    if (e.target.tagName === 'IMG' && e.target.classList.contains('comment-image-clickable')) {
      const modal = document.getElementById('imageModal');
      const modalImg = document.getElementById('modalImage');
      modalImg.src = e.target.src;
      modal.classList.remove('hidden');
    }
  });

  document.getElementById('imageModal').addEventListener('click', function() {
    this.classList.add('hidden');
  });
</script>
