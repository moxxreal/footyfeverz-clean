<div id="tacticalBoardMobileModal" class="tactical-board-mobile-modal" style="display: none;">
  <!-- Portrait hint -->
   <div class="orientation-hint">
  <p class="rotate-hint">
    üì±üîÑ Please rotate your device to use the tactical board.
  </p>
</div>

  <!-- Landscape board -->
  <div class="tactical-board-mobile-content">
    <div class="control-panel">
      <button id="mobileCloseBtn" class="tb-btn">Close ‚úï</button>

      <div class="formation-selector">
        <label for="formationSelect" style="color:#fff;">Formation:</label>
        <select id="formationSelect">
          <option value="4-3-3">4-3-3</option>
          <option value="4-3-3-f9">4-3-3 (False 9)</option>
          <option value="4-4-2">4-4-2</option>
          <option value="4-2-3-1">4-2-3-1</option>
          <option value="5-3-2">5-3-2</option>
          <option value="5-2-3">5-2-3</option>
        </select>
      </div>

      <div class="color-picker">
        <label for="circleColor" style="color:#fff;">Circle Color:</label>
        <input type="color" id="circleColor" value="#ffff00">
      </div>

      <div class="text-color-picker">
        <label for="textColor" style="color:#fff;">Text Color:</label>
        <select id="textColor">
          <option value="#000000">Black</option>
          <option value="#ffffff">White</option>
        </select>
      </div>

      <button id="mobileNameBtn" class="tb-btn">Naming: OFF</button>
      <button id="mobileUndoBtn" class="tb-btn" disabled>Undo ‚Üê</button>
<button id="mobileRedoBtn" class="tb-btn" disabled>Redo ‚Üí</button>
<button id="mobileSaveBtn" class="tb-btn">Save</button>
    </div>

    <div class="canvas-panel">
      <canvas id="tacticalCanvasMobile"></canvas>
      <!-- inline input will be injected here -->
    </div>
  </div>
</div>

<style>
    /* when the body has .modal-open, prevent any scrolling */
body.modal-open {
  overflow: hidden;
  height: 100vh;      /* lock the height to prevent ‚Äúbounce‚Äù */
}
  .tactical-board-mobile-modal {
    position: fixed;
    top: 0; left: 0;
    width: 100vw; height: 100vh;
    background: rgba(0, 0, 0, 0.85);
    z-index: 10000;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* Portrait: only show the hint */
  .tactical-board-mobile-content { display: none; }
  .orientation-hint {
    display: none;
    color: white;
    text-align: center;
    padding: 20px;
    font-size: 18px;
  }

  /* Rock animation lives at top level */
  @keyframes rock {
    0%   { transform: rotate(-3deg); }
    50%  { transform: rotate(3deg);  }
    100% { transform: rotate(-3deg); }
  }
  .orientation-hint .rotate-hint {
    display: inline-block;         /* needed for transform */
    animation: rock 1.5s infinite; /* smooth rocking */
    font-size: 18px;
    line-height: 1.4;
  }

  @media (orientation: portrait) {
    .orientation-hint {
      display: flex;
      flex-direction: column;
    }
  }

  /* Landscape: show the board */
  @media (orientation: landscape) {
    .orientation-hint { display: none; }
    .tactical-board-mobile-content {
      display: flex;
      width: 100%; height: 100%;
    }

    .control-panel {
      width: 40%;
      background: #222;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: stretch;
      padding: 10px;
      box-sizing: border-box;
    }
    .control-panel label {
      font-size: 12px;
      line-height: 1.3;
    }
    .control-panel .tb-btn {
      margin: 2px 0;
      padding: 6px 8px;
      border: none;
      background: #444;
      color: #fff;
      font-size: 12px;
      border-radius: 6px;
      cursor: pointer;
    }
    .control-panel .tb-btn:hover {
      background: #666;
    }

    .formation-selector,
    .color-picker,
    .text-color-picker {
      margin: 3px 0;
    }
    .formation-selector select,
    .color-picker input,
    .text-color-picker select {
      width: 100%;
      padding: 6px 8px;
      border-radius: 4px;
      border: 1px solid #555;
      background: #333;
      color: #fff;
      font-size: 12px;
    }

    .canvas-panel {
      width: 60%;
      position: relative;
    }
    #tacticalCanvasMobile {
      width: 100%;
      height: 100%;
      background: url('/images/tactical-pitch.png') center center / cover no-repeat;
      border-radius: 8px;
    }
    .canvas-panel .circle-input {
      position: absolute;
      z-index: 10001;
      box-sizing: border-box;
      width: 100px;
      padding: 2px 4px;
      font-size: 14px;
      text-align: center;
      border: 1px solid #333;
      border-radius: 4px;
      background: rgba(255,255,255,0.9);
    }
  }
</style>

<script>
  // formation position maps (x%, y%) from defense (left) to attack (right)
  const formations = {
    '4-3-3': [
      [5,50],[15,20],[15,40],[15,60],[15,80],
      [35,25],[35,50],[35,75],
      [65,25],[65,50],[65,75]
    ],
    '4-3-3-f9': [
      [5,50],[15,20],[15,40],[15,60],[15,80],
      [35,25],[35,50],[35,75],
      [55,50],[70,25],[70,75]
    ],
    '4-4-2': [
      [5,50],[15,20],[15,40],[15,60],[15,80],
      [35,20],[35,40],[35,60],[35,80],
      [65,40],[65,60]
    ],
    '4-2-3-1': [
      [5,50],[15,20],[15,40],[15,60],[15,80],
      [30,40],[30,60],[50,25],[50,50],[50,75],
      [70,50]
    ],
    '5-3-2': [
      [5,50],[15,15],[15,35],[15,50],[15,65],[15,85],
      [35,30],[35,50],[35,70],[65,40],[65,60]
    ],
    '5-2-3': [
      [5,50],[15,20],[15,40],[15,60],[15,80],[15,50],
      [35,35],[35,65],[65,25],[65,50],[65,75]
    ]
  };

  let currentColor   = '#ffff00';
  let textColor      = '#000000';
  let currentCoords  = [];
  let playerNames    = [];
  const circleRadius = 20;
  let draggingIndex  = null;
  let dragOffset     = { x:0, y:0 };
  let needsDraw      = false;
  let lastTapTime    = 0;
  let namingEnabled  = false;
  let history = [];
let historyIndex = -1;

  const bgImage = new Image();
  bgImage.src = '/images/tactical-pitch.png';
  let bgLoaded = false;
  bgImage.onload = () => bgLoaded = true;

  function saveState() {
  history = history.slice(0, historyIndex + 1);
  const state = {
    coords: currentCoords.map(pt => ({ x: pt.x, y: pt.y })),
    names: [...playerNames]
  };
  history.push(state);
  historyIndex++;
  updateUndoRedoButtons();
}

function restoreState(idx) {
  const state = history[idx];
  currentCoords = state.coords.map(pt => ({ x: pt.x, y: pt.y }));
  playerNames = [...state.names];
  needsDraw = true;
  updateUndoRedoButtons();
}

function updateUndoRedoButtons() {
  document.getElementById('mobileUndoBtn').disabled = historyIndex <= 0;
  document.getElementById('mobileRedoBtn').disabled = historyIndex >= history.length - 1;
}

  function initMobileCanvas() {
    const canvas = document.getElementById('tacticalCanvasMobile');
    const ctx    = canvas.getContext('2d');
    canvas.width  = canvas.clientWidth * devicePixelRatio;
    canvas.height = canvas.clientHeight * devicePixelRatio;
    ctx.scale(devicePixelRatio, devicePixelRatio);

    updateCurrentCoords();
    playerNames = new Array(currentCoords.length).fill('');
    startRenderLoop();

    // dragging
    canvas.onmousedown   = startDrag;
    canvas.onmousemove   = doDrag;
    document.onmouseup   = endDrag;
    canvas.ontouchstart  = e => startDrag(normalizeTouch(e));
    canvas.ontouchmove   = e => doDrag(normalizeTouch(e));
    document.ontouchend  = endDrag;

    canvas.ondblclick = e => {
      if (namingEnabled) handleNameAt(e);
    };

    canvas.addEventListener('touchstart', e => {
      const now = Date.now(), t = e.changedTouches[0];
      if (namingEnabled && now - lastTapTime < 300) {
        handleNameAt({
          target:        canvas,
          clientX:       t.clientX,
          clientY:       t.clientY,
          preventDefault: () => e.preventDefault()
        });
        e.preventDefault();
      }
      lastTapTime = now;
    });
  }

  function updateCurrentCoords() {
    const key  = document.getElementById('formationSelect').value;
    const base = formations[key] || formations['4-3-3'];
    const cw   = document.getElementById('tacticalCanvasMobile').clientWidth;
    const ch   = document.getElementById('tacticalCanvasMobile').clientHeight;
    currentCoords = base.map(([px,py]) => ({
      x: (px/100)*cw,
      y: (py/100)*ch
    }));
    currentColor = document.getElementById('circleColor').value;
  }

  function startRenderLoop() {
    needsDraw = true;
    (function loop(){
      if (needsDraw && bgLoaded) {
        drawAll();
        needsDraw = false;
      }
      requestAnimationFrame(loop);
    })();
  }

  function drawAll() {
    const canvas = document.getElementById('tacticalCanvasMobile');
    const ctx    = canvas.getContext('2d');
    ctx.clearRect(0,0,canvas.clientWidth,canvas.clientHeight);
    ctx.drawImage(bgImage,0,0,canvas.clientWidth,canvas.clientHeight);

    ctx.textAlign    = 'center';
    ctx.textBaseline = 'middle';
    ctx.font         = `${circleRadius * 0.8}px sans-serif`;

    currentCoords.forEach((pt,i) => {
      ctx.beginPath();
      ctx.arc(pt.x,pt.y,circleRadius,0,Math.PI*2);
      ctx.fillStyle   = currentColor;
      ctx.fill();
      ctx.strokeStyle = '#000';
      ctx.stroke();

      if (playerNames[i]) {
        ctx.fillStyle = textColor;
        ctx.fillText(playerNames[i], pt.x, pt.y);
      }
    });
  }

  function getMousePos(evt) {
    const r = evt.target.getBoundingClientRect();
    return {
      x: (evt.clientX - r.left) * devicePixelRatio,
      y: (evt.clientY - r.top ) * devicePixelRatio
    };
  }

  function normalizeTouch(e) {
    const t = e.changedTouches[0];
    return {
      target:        e.target,
      clientX:       t.clientX,
      clientY:       t.clientY,
      preventDefault: () => e.preventDefault()
    };
  }

  function startDrag(evt) {
    evt.preventDefault();
    const pos = getMousePos(evt);
    currentCoords.forEach((pt,i) => {
      const dx = pos.x/devicePixelRatio - pt.x;
      const dy = pos.y/devicePixelRatio - pt.y;
      if (dx*dx + dy*dy <= circleRadius*circleRadius) {
        draggingIndex = i;
        dragOffset.x  = pt.x - pos.x/devicePixelRatio;
        dragOffset.y  = pt.y - pos.y/devicePixelRatio;
      }
    });
  }

  function doDrag(evt) {
    if (draggingIndex === null) return;
    evt.preventDefault();
    const pos = getMousePos(evt);
    currentCoords[draggingIndex].x = pos.x/devicePixelRatio + dragOffset.x;
    currentCoords[draggingIndex].y = pos.y/devicePixelRatio + dragOffset.y;
    needsDraw = true;
  }

  function endDrag(evt) {
  if (draggingIndex !== null) {
    evt.preventDefault();
    saveState();
  }
  draggingIndex = null;
}

  function handleNameAt(evt) {
    const pos = getMousePos(evt);
    currentCoords.forEach((pt,i) => {
      const dx = pos.x/devicePixelRatio - pt.x;
      const dy = pos.y/devicePixelRatio - pt.y;
      if (dx*dx + dy*dy <= circleRadius*circleRadius) {
        showNameInput(i, pt);
      }
    });
  }

  function showNameInput(i, pt) {
    const old = document.querySelector('.canvas-panel .circle-input');
    if (old) old.remove();

    const container = document.querySelector('.canvas-panel');
    const input = document.createElement('input');
    input.type      = 'text';
    input.value     = playerNames[i] || '';
    input.className = 'circle-input';
    input.style.left = `${pt.x - 50}px`;
    input.style.top  = `${pt.y - circleRadius - 28}px`;
    container.appendChild(input);
    input.focus();

    function commit() {
      playerNames[i] = input.value.trim();
      needsDraw = true;
      input.remove();
    }
    input.addEventListener('keydown', e => {
      if (e.key === 'Enter') commit();
    });
    input.addEventListener('blur', commit);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const nameBtn = document.getElementById('mobileNameBtn');
    nameBtn.addEventListener('click', () => {
      namingEnabled = !namingEnabled;
      nameBtn.textContent = namingEnabled ? 'Naming: ON' : 'Naming: OFF';
      nameBtn.style.background = namingEnabled ? '#28a745' : '#444';
    });

    document.getElementById('textColor')
            .addEventListener('change', e => {
      textColor = e.target.value;
      needsDraw = true;
    });

    document.getElementById('mobileCloseBtn')
  .addEventListener('click', e => {
    e.preventDefault();
    e.stopPropagation();       // <-- prevent any parent handlers
    closeMobileTacticalBoard();
  });
    document.getElementById('formationSelect')
            .addEventListener('change', () => {
      updateCurrentCoords();
      playerNames = new Array(currentCoords.length).fill('');
      needsDraw = true;
    });
    document.getElementById('circleColor')
            .addEventListener('input', () => {
      currentColor = document.getElementById('circleColor').value;
      needsDraw = true;
    });
    document
  .getElementById('mobileSaveBtn')
  .addEventListener('click', e => {
    // prevent any other click-handlers (like the desktop one) from firing:
    e.preventDefault();
    e.stopPropagation();

    html2canvas(document.getElementById('tacticalCanvasMobile'))
      .then(canvas =>
        new Promise(resolve => canvas.toBlob(blob => resolve({ canvas, blob })))
      )
      .then(({ canvas, blob }) => {
        // put it into the same hidden input as desktop
        const input = document.getElementById('tacticImageInput');
        const dt    = new DataTransfer();
        dt.items.add(new File([blob], 'tactic-mobile.png', { type: 'image/png' }));
        input.files = dt.files;

        // show the inline preview
        let preview = document.getElementById('tacticImagePreview');
        if (!preview) {
          preview = document.createElement('img');
          preview.id = 'tacticImagePreview';
          preview.style.maxWidth    = '200px';
          preview.style.marginTop   = '10px';
          preview.style.borderRadius = '12px';
          const commentText = document.getElementById('commentText');
          commentText.parentNode.insertBefore(preview, commentText.nextSibling);
        }
        preview.src = URL.createObjectURL(blob);
        preview.style.display = 'block';

        // close mobile _and_ desktop just in case
        closeMobileTacticalBoard();
        if (typeof closeTacticalBoard === 'function') {
          closeTacticalBoard();
        }

        alert('Tactic image attached to your comment!');
      });
  });
    document.getElementById('mobileUndoBtn').addEventListener('click', () => {
  if (historyIndex > 0) restoreState(--historyIndex);
});
document.getElementById('mobileRedoBtn').addEventListener('click', () => {
  if (historyIndex < history.length - 1) restoreState(++historyIndex);
});
    window.addEventListener('resize', () => {
      if (document.getElementById('tacticalBoardMobileModal').style.display === 'flex') {
        initMobileCanvas();
      }
    });
  });

  function openMobileTacticalBoard() {
  document.body.classList.add('modal-open');
  document.getElementById('tacticalBoardMobileModal')
          .style.display = 'flex';
  initMobileCanvas();
}
function closeMobileTacticalBoard() {
  // hide mobile modal
  document.getElementById('tacticalBoardMobileModal').style.display = 'none';
  // unlock background scrolling (if you added body.modal-open earlier)
  document.body.classList.remove('modal-open');
  // ensure desktop modal is also hidden
  const desktop = document.getElementById('tacticalModal');
  if (desktop) desktop.style.display = 'none';
}
</script>
