<!-- tactical-board-mobile.ejs -->
<style>
  #tacticalMobileModal {
    position: fixed;
    top: 0; left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0,0,0,0.95);
    z-index: 9999;
    display: flex;
    flex-direction: row; /* horizontal layout */
    overflow: hidden; /* prevent scrolling */
    user-select: none;
    -webkit-overflow-scrolling: auto; /* disable momentum scroll */
    touch-action: none; /* prevent pinch zoom */
  }

  #mobileContentLandscape {
    display: flex;
    width: 100%;
    height: 100%;
    flex-direction: row;
    overflow: hidden;
  }

  .mobile-controls {
    flex: 0 0 20%;
    padding: 10px;
    background: #fff;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    gap: 8px;
    overflow: hidden;
    max-height: 100vh;
  }

  .mobile-controls h3 {
    margin: 0;
    font-size: 1rem;
  }

  .mobile-controls select,
  .mobile-controls input[type="color"],
  .mobile-controls button {
    font-size: 16px; /* Avoid iOS zoom on inputs */
    padding: 8px 10px;
    border-radius: 6px;
  }

  .mobile-controls button {
    background: linear-gradient(to bottom, #007BFF, #0056b3);
    color: white;
    border: none;
    user-select: none;
    cursor: pointer;
  }

  .mobile-controls button:active {
    transform: scale(0.95);
  }

  #mobileTacticalPitch {
    flex: 1 1 80%;
    background: #003300;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    position: relative;
    overflow: hidden;
    max-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  #mobileTacticalPitch {
  /* usual flex setupâ€¦ */
  aspect-ratio: 105 / 68; /* match your pitch imageâ€™s width/height ratio */
}

  #mobileTacticalCanvas {
    width: 100% !important;
    height: 100% !important;
    max-width: 100%;
    max-height: 100%;
    background: url('/images/tactical-pitch.png') center center / contain no-repeat;
    border-radius: 12px;
    border: 2px solid #000;
    touch-action: none;
    display: block;
    object-fit: contain;
  }

  #mobileNameInput {
    position: absolute;
    pointer-events: auto;
    display: none;
    z-index: 10001;
    font-size: 16px;
    padding: 6px 8px;
    border: 1px solid #aaa;
    border-radius: 6px;
    background: white;
  }

  /* Portrait overlay */
  #rotatePhoneOverlay {
    position: fixed;
    top: 0; left: 0;
    width: 100vw; height: 100vh;
    background: rgba(0,0,0,0.9);
    color: white;
    font-size: 22px;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 20px;
    z-index: 10000;
    user-select: none;
    display: none;
  }
</style>

<div id="tacticalMobileModal" style="display:none;">
  <div id="rotatePhoneOverlay">Please rotate your phone to landscape mode to use the tactical board.</div>
  <div id="mobileContentLandscape" style="display:none;">
    <div class="mobile-controls">
      <h3>Formation</h3>
      <select onchange="loadMobileFormation(this.value)">
        <option value="433">4-3-3</option>
        <option value="433f9">4-3-3 False 9</option>
        <option value="442">4-4-2</option>
        <option value="4231">4-2-3-1</option>
        <option value="532">5-3-2</option>
        <option value="523">5-2-3</option>
      </select>

      <h3>Color</h3>
      <input type="color" id="mobileTeamColorPicker" onchange="changeMobileTeamColor(this.value)" value="#007BFF" />

      <button onclick="toggleMobileArrowMode()">ðŸ¡’ Arrow Mode: <span id='mobileArrowModeStatus'>Off</span></button>
      <button id="mobileNameModeBtn" onclick="toggleMobileNamingMode()">âœŽ Add Playerâ€™s Name: <span id="mobileNamingModeStatus">Off</span></button>

      <h3>Text Color</h3>
      <select id="mobileTextColorPicker" onchange="changeMobileTextColor(this.value)">
        <option value="white" selected>White</option>
        <option value="black">Black</option>
      </select>

      <button onclick="mobileUndo()">Undo</button>
      <button onclick="mobileRedo()">Redo</button>
      <button onclick="submitMobileTactics()">Submit</button>
      <button onclick="closeMobileTacticalBoard()">Exit</button>
    </div>

    <div id="mobileTacticalPitch">
      <canvas id="mobileTacticalCanvas"></canvas>
      <input id="mobileNameInput" type="text" placeholder="Enter name" />
    </div>
  </div>
</div>

<script>
  let mobileDraggedPlayer = null;
  let mobileDragOffsetX = 0;
  let mobileDragOffsetY = 0;
  let mobileUndoStack = [];
  let mobileRedoStack = [];
  let mobilePlayerColor = '#007BFF';
  let mobileTacticalBoardActivated = false;
  let mobileArrowMode = false;
  let mobileArrows = [];
  let mobileArrowStart = null;
  let mobileTempArrowEnd = null;
  let mobileNamingMode = false;
  let mobilePlayerNameColor = 'white';
  let mobileCanvas, mobileCtx;
  const mobilePlayers = [];
  let mobileCurrentFormationCode = '433';

  const mobilePitchImage = new Image();
  mobilePitchImage.src = '/images/tactical-pitch.png';

  mobilePitchImage.onload = () => {
    if (mobileCanvas && mobileCtx) drawMobilePlayers();
  };

  function checkMobileOrientation() {
    const overlay = document.getElementById('rotatePhoneOverlay');
    const content = document.getElementById('mobileContentLandscape');

    if (window.innerWidth < window.innerHeight) {
      overlay.style.display = 'flex';
      content.style.display = 'none';
    } else {
      overlay.style.display = 'none';
      content.style.display = 'flex';
      resizeMobileCanvas();
      drawMobilePlayers();
    }
  }

  window.addEventListener('resize', () => {
    if (mobileTacticalBoardActivated) {
      checkMobileOrientation();
    }
  });

  window.addEventListener('orientationchange', () => {
    if (mobileTacticalBoardActivated) {
      setTimeout(checkMobileOrientation, 300);
    }
  });

  function captureMobileState() {
    return {
      players: mobilePlayers.map(p => ({ ...p })),
      arrows: mobileArrows.map(a => ({
        start: { ...a.start },
        end: { ...a.end }
      }))
    };
  }

  function changeMobileTeamColor(color) {
    mobilePlayerColor = color;
    drawMobilePlayers();
  }

  function toggleMobileNamingMode() {
    mobileNamingMode = !mobileNamingMode;
    document.getElementById('mobileNamingModeStatus').innerText = mobileNamingMode ? 'On' : 'Off';
    if (mobileNamingMode) {
      alert("Naming mode ON: Tap a player to set a name.");
      mobileArrowMode = false;
      document.getElementById('mobileArrowModeStatus').innerText = 'Off';
    }
  }

  function changeMobileTextColor(color) {
    mobilePlayerNameColor = color;
    drawMobilePlayers();
  }

  function toggleMobileArrowMode() {
    mobileArrowMode = !mobileArrowMode;
    document.getElementById('mobileArrowModeStatus').innerText = mobileArrowMode ? 'On' : 'Off';
    if (mobileArrowMode) {
      mobileNamingMode = false;
      document.getElementById('mobileNamingModeStatus').innerText = 'Off';
    }
  }

  function drawMobileArrow(start, end) {
    const headlen = 15;
    const dx = end.x - start.x;
    const dy = end.y - start.y;
    const angle = Math.atan2(dy, dx);

    mobileCtx.strokeStyle = 'red';
    mobileCtx.lineWidth = 4;
    mobileCtx.beginPath();
    mobileCtx.moveTo(start.x, start.y);
    mobileCtx.lineTo(end.x, end.y);
    mobileCtx.stroke();

    mobileCtx.beginPath();
    mobileCtx.moveTo(end.x, end.y);
    mobileCtx.lineTo(end.x - headlen * Math.cos(angle - Math.PI / 6), end.y - headlen * Math.sin(angle - Math.PI / 6));
    mobileCtx.lineTo(end.x - headlen * Math.cos(angle + Math.PI / 6), end.y - headlen * Math.sin(angle + Math.PI / 6));
    mobileCtx.lineTo(end.x, end.y);
    mobileCtx.fillStyle = 'red';
    mobileCtx.fill();
  }

  function drawMobilePlayers() {
    mobileCtx.clearRect(0, 0, mobileCanvas.width, mobileCanvas.height);

    if (mobilePitchImage.complete && mobilePitchImage.naturalWidth !== 0) {
      mobileCtx.drawImage(mobilePitchImage, 0, 0, mobileCanvas.width, mobileCanvas.height);
    } else {
      mobileCtx.fillStyle = '#2c6f2c';
      mobileCtx.fillRect(0, 0, mobileCanvas.width, mobileCanvas.height);
    }

    mobileArrows.forEach(arrow => drawMobileArrow(arrow.start, arrow.end));
    if (mobileArrowStart && mobileTempArrowEnd) {
      drawMobileArrow(mobileArrowStart, mobileTempArrowEnd);
    }

    mobilePlayers.forEach(p => {
      mobileCtx.beginPath();
      mobileCtx.arc(p.x, p.y, 30, 0, Math.PI * 2);
      mobileCtx.fillStyle = mobilePlayerColor;
      mobileCtx.fill();
      mobileCtx.strokeStyle = 'white';
      mobileCtx.lineWidth = 2;
      mobileCtx.stroke();
      mobileCtx.fillStyle = mobilePlayerNameColor;
      mobileCtx.font = 'bold 16px Arial';
      mobileCtx.textAlign = 'center';
      mobileCtx.textBaseline = 'middle';
      mobileCtx.fillText(p.name || p.label, p.x, p.y);
    });
  }

  function resizeMobileCanvas() {
    if (!mobileCanvas) return;
    mobileCtx.setTransform(1, 0, 0, 1, 0, 0);

    const container = document.getElementById('mobileTacticalPitch');
    const rect = container.getBoundingClientRect();

    mobileCanvas.width = rect.width * window.devicePixelRatio;
    mobileCanvas.height = rect.height * window.devicePixelRatio;

    mobileCanvas.style.width = rect.width + 'px';
    mobileCanvas.style.height = rect.height + 'px';

    mobileCtx.scale(window.devicePixelRatio, window.devicePixelRatio);
    drawMobilePlayers();
  }

  function mobileUndo() {
    if (mobileUndoStack.length <= 1) return;
    mobileRedoStack.push(captureMobileState());
    mobileUndoStack.pop();
    const prev = mobileUndoStack[mobileUndoStack.length - 1];
    mobilePlayers.length = 0;
    mobilePlayers.push(...prev.players.map(p => ({ ...p })));
    mobileArrows.length = 0;
    mobileArrows.push(...prev.arrows.map(a => ({
      start: { ...a.start },
      end: { ...a.end }
    })));
    drawMobilePlayers();
  }

  function mobileRedo() {
    if (mobileRedoStack.length === 0) return;
    mobileUndoStack.push(captureMobileState());
    const next = mobileRedoStack.pop();
    mobilePlayers.length = 0;
    mobilePlayers.push(...next.players.map(p => ({ ...p })));
    mobileArrows.length = 0;
    mobileArrows.push(...next.arrows.map(a => ({
      start: { ...a.start },
      end: { ...a.end }
    })));
    drawMobilePlayers();
  }

  function loadMobileFormation(code) {
    const midY = mobileCanvas.height / 2;
    const lineX = [60, 180, 300, 420, 540, 660, 780];
    if (mobilePlayers.length > 0) mobileUndoStack.push(captureMobileState());
    mobileRedoStack.length = 0;
    mobilePlayers.length = 0;
    mobileCurrentFormationCode = code;

    const formations = {
      '433': [
        ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
        ['CM', 3, -100], ['CDM', 2, 0], ['CM', 3, 100],
        ['LW', 4, -150], ['RW', 4, 150], ['ST', 5, 0]
      ],
      '433f9': [
        ['GK', 0, 0], ['LB', 2, -170], ['LCB', 1, -60], ['RCB', 1, 60], ['RB', 2, 170],
        ['CM', 3, -100], ['CDM', 2, 0], ['CM', 3, 100],
        ['LW', 5, -130], ['RW', 5, 130], ['False 9', 4, 0]
      ],
      '442': [
        ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
        ['LM', 4, -170], ['CDM', 3, -60], ['CDM', 3, 60], ['RM', 4, 170],
        ['ST', 5, -60], ['ST', 5, 60]
      ],
      '4231': [
        ['GK', 0, 0], ['LB', 2, -170], ['CB', 1, -60], ['CB', 1, 60], ['RB', 2, 170],
        ['CDM', 3, -60], ['CDM', 3, 60], ['CAM', 4, 0],
        ['LM', 4, -170], ['RM', 4, 170], ['ST', 5, 0]
      ],
      '532': [
        ['GK', 0, 0], ['LWB', 3, -190], ['LCB', 2, -110], ['CB', 1, 0], ['RCB', 2, 110], ['RWB', 3, 190],
        ['CM', 4, -110], ['CDM', 3, 0], ['CM', 4, 110], ['ST', 5, -60], ['ST', 5, 60]
      ],
      '523': [
        ['GK', 0, 0], ['LWB', 3, -190], ['LCB', 2, -110], ['CB', 1, 0], ['RCB', 2, 110], ['RWB', 3, 190],
        ['CM', 3, -70], ['CM', 3, 70], ['LW', 4, -120], ['RW', 4, 120], ['ST', 5, 0]
      ]
    };

    formations[code].forEach(([label, xIdx, yOffset]) =>
      mobilePlayers.push({ x: lineX[xIdx], y: midY + yOffset, label })
    );
    drawMobilePlayers();
  }

  function setupMobileDragListeners() {
    if (!mobileCanvas) return;

    function getTouchPos(touchEvent) {
      const rect = mobileCanvas.getBoundingClientRect();
      const scaleX = mobileCanvas.width / rect.width;
      const scaleY = mobileCanvas.height / rect.height;
      const touch = touchEvent.touches[0] || touchEvent.changedTouches[0];
      return {
        x: (touch.clientX - rect.left) * scaleX,
        y: (touch.clientY - rect.top) * scaleY,
      };
    }

    mobileCanvas.addEventListener('touchstart', e => {
      e.preventDefault();
      const { x: tx, y: ty } = getTouchPos(e);

      if (mobileArrowMode) {
        mobileArrowStart = { x: tx, y: ty };
        return;
      }

      if (mobileNamingMode) {
        for (let p of mobilePlayers) {
          if (Math.hypot(tx - p.x, ty - p.y) < 30) {
            setTimeout(() => {
              const input = document.getElementById('mobileNameInput');
              if (!input) return;

              const inputWidth = 140;
              const inputHeight = 40;

              const canvasContainer = mobileCanvas.parentElement;
              const scaleX = canvasContainer.clientWidth / mobileCanvas.width;
              const scaleY = canvasContainer.clientHeight / mobileCanvas.height;

              const screenX = p.x * scaleX;
              const screenY = p.y * scaleY;

              input.style.left = `${screenX - inputWidth / 2}px`;
              input.style.top = `${screenY - inputHeight - 10}px`;
              input.style.width = inputWidth + 'px';
              input.style.height = inputHeight + 'px';

              input.style.display = 'block';
              input.value = p.name || '';
              input.focus();

              input.onkeydown = ev => {
                if (ev.key === 'Enter') {
                  p.name = input.value.trim();
                  input.style.display = 'none';
                  drawMobilePlayers();
                  mobileUndoStack.push(captureMobileState());
                  mobileRedoStack = [];
                } else if (ev.key === 'Escape') {
                  input.style.display = 'none';
                }
              };
            }, 10);
            return;
          }
        }
        return;
      }

      for (let p of mobilePlayers) {
        if (Math.hypot(tx - p.x, ty - p.y) < 30) {
          mobileDraggedPlayer = p;
          mobileDragOffsetX = tx - p.x;
          mobileDragOffsetY = ty - p.y;
          break;
        }
      }
    }, { passive: false });

    mobileCanvas.addEventListener('touchmove', e => {
      e.preventDefault();
      if (!mobileDraggedPlayer && !mobileArrowMode) return;

      const { x: tx, y: ty } = getTouchPos(e);

      if (mobileArrowMode && mobileArrowStart) {
        mobileTempArrowEnd = { x: tx, y: ty };
        drawMobilePlayers();
        return;
      }

      if (mobileDraggedPlayer) {
        mobileDraggedPlayer.x = tx - mobileDragOffsetX;
        mobileDraggedPlayer.y = ty - mobileDragOffsetY;
        drawMobilePlayers();
      }
    }, { passive: false });

    mobileCanvas.addEventListener('touchend', e => {
      e.preventDefault();
      if (mobileArrowMode && mobileArrowStart) {
        const { x: tx, y: ty } = getTouchPos(e);
        mobileArrows.push({ start: mobileArrowStart, end: { x: tx, y: ty } });
        mobileArrowStart = null;
        mobileTempArrowEnd = null;
        mobileUndoStack.push(captureMobileState());
        mobileRedoStack = [];
        drawMobilePlayers();
      }

      if (mobileDraggedPlayer) {
        mobileDraggedPlayer = null;
        mobileUndoStack.push(captureMobileState());
        mobileRedoStack = [];
      }
    }, { passive: false });

    mobileCanvas.addEventListener('touchcancel', e => {
      e.preventDefault();
      if (mobileArrowStart) mobileArrowStart = null;
      if (mobileDraggedPlayer) {
        mobileDraggedPlayer = null;
        mobileUndoStack.push(captureMobileState());
        mobileRedoStack = [];
      }
    }, { passive: false });
  }

  function openMobileTacticalBoard() {
    mobileTacticalBoardActivated = true;
    const modal = document.getElementById('tacticalMobileModal');
    modal.style.display = 'flex';

    setTimeout(() => {
      mobileCanvas = document.getElementById('mobileTacticalCanvas');
      mobileCtx = mobileCanvas.getContext('2d');
      mobileCanvas.width = mobileCanvas.offsetWidth;
      mobileCanvas.height = mobileCanvas.offsetHeight;

      if (mobileUndoStack.length === 0) {
        loadMobileFormation('433');
        mobileUndoStack.push(captureMobileState());
      } else {
        mobilePlayers.length = 0;
        const last = mobileUndoStack[mobileUndoStack.length - 1];
        mobilePlayers.push(...last.players.map(p => ({ ...p })));
        mobileArrows.push(...last.arrows.map(a => ({
          start: { ...a.start },
          end: { ...a.end }
        })));
      }

      mobileRedoStack = [];
      checkMobileOrientation();
      setupMobileDragListeners();
      document.querySelector('#mobileTeamColorPicker').disabled = false;
    }, 10);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const tacticalModal = document.getElementById('tacticalMobileModal');

    function disableZoom(e) {
      if (e.touches.length > 1) {
        e.preventDefault();
      }
    }

    if (tacticalModal) {
      tacticalModal.addEventListener('touchstart', disableZoom, { passive: false });
      tacticalModal.addEventListener('touchmove', disableZoom, { passive: false });
      tacticalModal.addEventListener('wheel', e => e.preventDefault(), { passive: false });
    }
  });

  function closeMobileTacticalBoard() {
    mobileTacticalBoardActivated = false;
    document.getElementById('tacticalMobileModal').style.display = 'none';
  }

  function submitMobileTactics() {
    drawMobilePlayers();

    mobileCanvas.toBlob(blob => {
      const tacticInput = document.getElementById('tacticImageInput');
      const dt = new DataTransfer();
      dt.items.add(new File([blob], 'tactic.png', { type: 'image/png' }));
      tacticInput.files = dt.files;

      let preview = document.getElementById('tacticImagePreview');
      if (!preview) {
        const img = document.createElement('img');
        img.id = 'tacticImagePreview';
        img.style.maxWidth = '200px';
        img.style.marginTop = '10px';
        img.style.borderRadius = '12px';
        img.style.display = 'block';

        const commentText = document.getElementById('commentText');
        commentText.parentNode.insertBefore(img, commentText.nextSibling);

        preview = img;
      }

      if (preview.src) {
        URL.revokeObjectURL(preview.src);
      }

      const url = URL.createObjectURL(blob);
      preview.src = url;
      preview.style.display = 'block';

      closeMobileTacticalBoard();
      alert('Tactic image attached to your comment!');
    });
  }
</script>
