<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Chat with <%= receiver.username %> | Footy Feverz</title>
  <link rel="stylesheet" href="/style.css" />
  <style>
    .chat-container {
      max-width: 700px;
      margin: 40px auto;
      padding: 0 20px;
      font-family: 'Segoe UI', sans-serif;
    }

    .chat-container h2 {
      text-align: center;
      margin-bottom: 15px;
    }

    .chat-box {
      border: 1px solid #ccc;
      border-radius: 10px;
      padding: 1rem;
      height: 320px;
      overflow-y: auto;
      background: #f9f9f9;
      display: flex;
      flex-direction: column;
    }

    .message {
      display: flex;
      flex-direction: column;
      margin: 10px 0;
      max-width: 70%;
    }

    .message.sent {
      align-self: flex-end;
      text-align: right;
    }

    .message.received {
      align-self: flex-start;
      text-align: left;
    }

    .avatar-name {
      display: flex;
      align-items: center;
      margin-bottom: 5px;
    }

    .avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      margin-right: 8px;
    }

    .username-label {
      font-weight: bold;
      font-size: 14px;
    }

    .bubble {
      background: #f8d7da;
      padding: 10px;
      border-radius: 10px;
      word-wrap: break-word;
    }

    .sent .bubble {
      background: #d1e7dd;
    }

    .media {
      max-width: 100%;
      margin-top: 10px;
      border-radius: 8px;
    }

    .timestamp {
      font-size: 12px;
      color: #888;
      margin-top: 4px;
    }

    #chat-form {
      margin-top: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    #message-input {
      width: 100%;
      max-width: 700px;
      padding: 12px;
      font-size: 1rem;
      border-radius: 8px;
      border: 1px solid #ccc;
    }

    #chat-form button {
      margin-top: 10px;
      padding: 10px 20px;
      border: none;
      border-radius: 6px;
      background: #007bff;
      color: white;
      cursor: pointer;
    }

    #typing-indicator {
      text-align: center;
      font-style: italic;
      color: #888;
      display: none;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <%- include('partials/_header', {
    headerClass: 'header-home',
    useTeamHeader: false,
    showAuthLinks: true,
    showLeagueLink: false,
    hideAuthModals: false
  }) %>

  <section class="chat-container">
    <h2>
      Chat with <%= receiver.username %>
      <span id="online-status" style="font-size: 16px; margin-left: 10px; color: #888;">Checking...</span>
    </h2>

    <div id="chat-box" class="chat-box"></div>
    <p id="typing-indicator">Typing...</p>

    <form id="chat-form">
      <textarea id="message-input" rows="3" placeholder="Type your message..." required></textarea>
      <button type="submit">Send</button>
    </form>
  </section>

  <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/dayjs/plugin/relativeTime.js"></script>
  <script>
    dayjs.extend(window.dayjs_plugin_relativeTime);
  </script>
  <script src="/socket.io/socket.io.js"></script>

  <script>
    const currentUsername = '<%= currentUser.username %>';
    const receiverUsername = '<%= receiver.username %>';
    const chatBox = document.getElementById('chat-box');
    const messageInput = document.getElementById('message-input');
    const typingIndicator = document.getElementById('typing-indicator');
    const statusElement = document.getElementById('online-status');
    const socket = io();

    socket.emit('joinRoom', { sender: currentUsername, receiver: receiverUsername });
    socket.emit('checkOnlineStatus', { userToCheck: receiverUsername });

    socket.on('userOnline', ({ username }) => {
      if (username === receiverUsername) {
        statusElement.textContent = '🟢 Online';
        statusElement.style.color = 'green';
      }
    });

    socket.on('userOffline', ({ username, lastSeen }) => {
      if (username === receiverUsername) {
        const relative = lastSeen ? dayjs(lastSeen).fromNow() : 'a while ago';
        statusElement.textContent = `⚫️ Last seen ${relative}`;
        statusElement.style.color = '#888';
      }
    });

    async function loadMessages() {
      try {
        const res = await fetch(`/api/messages/conversation/${receiverUsername}`);
        const messages = await res.json();
        chatBox.innerHTML = '';
        messages.forEach(renderMessage);
        scrollToBottom();
      } catch (err) {
        console.error('❌ Failed to load messages:', err);
      }
    }

    function renderMessage(msg) {
      const container = document.createElement('div');
      container.className = 'message ' + (msg.sender === currentUsername ? 'sent' : 'received');

      const userRow = document.createElement('div');
      userRow.className = 'avatar-name';

      const avatar = document.createElement('img');
      avatar.className = 'avatar';
      avatar.src = msg.profile_pic || '/default-avatar.png';

      const username = document.createElement('span');
      username.className = 'username-label';
      username.textContent = msg.sender;

      userRow.appendChild(avatar);
      userRow.appendChild(username);
      container.appendChild(userRow);

      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      bubble.textContent = msg.content;
      container.appendChild(bubble);

      if (msg.media) {
        const isVideo = msg.media.endsWith('.mp4') || msg.media.endsWith('.webm') || msg.media.endsWith('.ogg');
        const mediaElem = document.createElement(isVideo ? 'video' : 'img');
        mediaElem.className = 'media';
        mediaElem.src = msg.media;
        if (isVideo) mediaElem.controls = true;
        container.appendChild(mediaElem);
      }

      const time = document.createElement('div');
      time.className = 'timestamp';
      try {
        if (msg.timestamp?.seconds) {
          time.textContent = dayjs.unix(msg.timestamp.seconds).fromNow();
        } else if (msg.timestamp?.toDate) {
          time.textContent = dayjs(msg.timestamp.toDate()).fromNow();
        } else {
          time.textContent = dayjs(msg.timestamp).fromNow();
        }
      } catch {
        time.textContent = 'just now';
      }
      container.appendChild(time);

      chatBox.appendChild(container);
    }

    function scrollToBottom() {
      chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: 'smooth' });
    }

    document.getElementById('chat-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const content = messageInput.value.trim();
      if (!content) return;

      try {
        await fetch('/api/messages/send', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ receiver: receiverUsername, content })
        });

        socket.emit('chatMessage', { sender: currentUsername, receiver: receiverUsername, content });
        messageInput.value = '';
        socket.emit('stopTyping', { to: receiverUsername, from: currentUsername });
      } catch (err) {
        console.error('❌ Failed to send message:', err);
      }
    });

    socket.on('newMessage', (msg) => {
      if (
        (msg.sender === currentUsername && msg.receiver === receiverUsername) ||
        (msg.sender === receiverUsername && msg.receiver === currentUsername)
      ) {
        renderMessage(msg);
        scrollToBottom();
      }
    });

    let typingTimeout;
    messageInput.addEventListener('input', () => {
      socket.emit('typing', { to: receiverUsername, from: currentUsername });
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('stopTyping', { to: receiverUsername, from: currentUsername });
      }, 1000);
    });

    socket.on('typing', ({ from }) => {
      if (from === receiverUsername) typingIndicator.style.display = 'block';
    });

    socket.on('stopTyping', ({ from }) => {
      if (from === receiverUsername) typingIndicator.style.display = 'none';
    });

    loadMessages();
  </script>
</body>
</html>
