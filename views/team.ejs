<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title><%= teamname %> Fan Page | Footy Feverz</title>
  <link rel="stylesheet" href="/style.css" />
  <script src="https://cdn.jsdelivr.net/npm/@joeattardi/emoji-button@4.6.2/dist/emoji-button.min.js"></script>
  <style>
    .comment-image-clickable {
      width: 100%;
      max-width: 90vw;
      height: auto;
      border-radius: 12px;
      margin-top: 12px;
      cursor: zoom-in;
    }

    @media (min-width: 768px) {
      .comment-image-clickable {
        max-width: 600px;
      }
    }

    #imageModal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.85);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    #modalImage {
      max-width: 95%;
      max-height: 95%;
      border-radius: 10px;
      box-shadow: 0 0 20px black;
    }

    .shake {
      animation: shake 0.4s;
    }

    @keyframes shake {
      0% { transform: translateX(0); }
      25% { transform: translateX(-5px); }
      50% { transform: translateX(5px); }
      75% { transform: translateX(-5px); }
      100% { transform: translateX(0); }
    }
  </style>
  <style>
  @media (max-width: 767px) {
    #commentForm button img,
    #commentForm label img {
      width: 140px !important;
    }

    #emoji-button {
      display: none !important;
    }
  }
</style>
</head>
<body>
  <%- include('partials/_header', {
    headerClass: 'header-simple',
    showAuthLinks: false,
    showLeagueLink: true,
    leagueSlug,
    leagueName
  }) %>
  <div style="
  width: 95%;
  max-width: 1400px;
  margin: 40px auto;
  display: flex;
  justify-content: center;
  align-items: center;
">
  <img src="<%= imagePath %>" alt="<%= teamname %> Logo" style="
    width: 100%;
    height: auto;
    display: block;
    margin: 0;
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  " />
</div>
<!-- üî¥ JS-triggered inline error box (hidden by default) -->
<div id="pokeErrorBox" style="
  display: none;
  background: #ffe0e0;
  color: #b30000;
  padding: 12px 20px;
  border-radius: 10px;
  margin: 20px auto;
  font-weight: bold;
  font-size: 16px;
  max-width: 600px;
  text-align: center;
"></div>

<!-- ‚ö†Ô∏è Server-rendered error message (fallback) -->
<% if (pokeError) { %>
  <div style="
    background: #ffe0e0;
    color: #990000;
    padding: 12px 20px;
    border-radius: 10px;
    margin-bottom: 25px;
    font-weight: bold;
    font-size: 16px;
    max-width: 600px;
    margin: 0 auto 25px;
    text-align: center;
  ">
    ‚ö†Ô∏è <%= pokeError %>
  </div>
<% } %>

<!-- üéØ Big Centered "Fight Rival" Button -->
<div style="display: flex; justify-content: center; margin: 40px 0;">
  <button type="button" id="pokeRivalBtn" style="
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
  ">
    <img src="/images/fight-rival.png" alt="Fight Rival" class="big-poke-button" style="width: 100%; max-width: 600px; height: auto;" />
  </button>
</div>

<!-- üî• Active Rival Pokes -->
<% if (pokeThreads && pokeThreads.length > 0) { %>
  <div class="poke-rival-container" style="margin-bottom: 40px;">
    <h2 style="margin-bottom: 15px;">üî• Active Rival Pokes</h2>

    <% pokeThreads.forEach(poke => {
      const formattedTeamB = poke.teamB.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
    %>
      <div class="poke-thread" style="
        border: 4px solid #ff1a1a;
        background: linear-gradient(135deg, #fff0f0, #ffe6e6);
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 35px;
        box-shadow: 0 6px 16px rgba(0,0,0,0.15);
        transition: transform 0.3s ease;
        font-family: 'Segoe UI', sans-serif;
      ">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 18px;">
          <div style="font-size: 22px;">
            <strong style="color: #d10000;"><%= poke.createdBy %></strong>
            <span style="color: #333;"> poked </span>
            <strong style="color: #0055cc;"><%= formattedTeamB %></strong>
          </div>
          <span id="countdown-<%= poke.id %>" style="
            font-size: 18px;
            color: #d10000;
            font-weight: bold;
          "></span>
        </div>

        <p style="margin: 15px 0; font-size: 20px; color: #444; font-weight: 500;"><%= poke.text %></p>

        <% if (poke.media) {
          const isVideo = poke.media.endsWith('.mp4') || poke.media.endsWith('.webm') || poke.media.endsWith('.ogg');
        %>
          <% if (isVideo) { %>
            <video src="<%= poke.media %>" controls style="width: 100%; border-radius: 12px; margin-top: 15px;"></video>
          <% } else { %>
            <img src="<%= poke.media %>" style="width: 100%; border-radius: 12px; margin-top: 15px;" />
          <% } %>
        <% } %>

        <div style="text-align: center; margin-top: 25px;">
          <a href="/poke/<%= poke.id %>" style="
            text-decoration: none;
            background-color: #ff1a1a;
            color: white;
            padding: 16px 28px;
            font-size: 20px;
            border-radius: 12px;
            font-weight: bold;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            transition: background-color 0.2s ease, transform 0.2s ease;
            display: inline-block;
          " onmouseover="this.style.backgroundColor='#cc0000'; this.style.transform='scale(1.05)';"
            onmouseout="this.style.backgroundColor='#ff1a1a'; this.style.transform='scale(1)';">
            Join the Rivalry ‚Üí
          </a>
        </div>
      </div>
    <% }) %>
  </div>
<% } %>

  <div id="commentsContainer" class="comments-container">
    <% if (comments.length === 0) { %>
      <p>No comments yet. Be the first!</p>
    <% } else { %>
      <% comments.forEach(comment => { %>
        <div class="comment-item">
          <div class="comment-user" style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
            <img src="<%= comment.profile_pic || '/default-avatar.png' %>" alt="Avatar" class="comment-avatar" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;" />
            <strong><a href="/user/<%= comment.user %>"><%= comment.user %></a></strong>
          </div>

          <% if (comment.text && comment.text.trim()) { %>
            <p><%= comment.text %></p>
          <% } %>

          <% if (comment.media) {
            const isVideo = comment.media.endsWith('.mp4') || comment.media.endsWith('.webm') || comment.media.endsWith('.ogg');
          %>
            <% if (isVideo) { %>
              <video src="<%= comment.media %>" controls style="max-width: 100%; border-radius: 10px; margin-top: 10px;"></video>
            <% } else { %>
              <img src="<%= comment.media %>" class="comment-image-clickable" />
            <% } %>
          <% } %>

          <div class="reactions">
            <button onclick="reactToComment('<%= comment.id %>', 'like')">üëç <span id="like-<%= comment.id %>"><%= comment.like_reactions || 0 %></span></button>
            <button onclick="reactToComment('<%= comment.id %>', 'funny')">üòÇ <span id="funny-<%= comment.id %>"><%= comment.funny_reactions || 0 %></span></button>
            <button onclick="reactToComment('<%= comment.id %>', 'angry')">üò° <span id="angry-<%= comment.id %>"><%= comment.angry_reactions || 0 %></span></button>
            <button onclick="reactToComment('<%= comment.id %>', 'love')">üòç <span id="love-<%= comment.id %>"><%= comment.love_reactions || 0 %></span></button>
          </div>

          <small style="color: #999;" title="<%= comment.timestamp?.toDate().toLocaleString() %>">
  <%= comment.relativeTime %>
</small>
        </div>
      <% }) %>
    <% } %>
  </div>
  <% if (totalPages > 1) { %>
  <div class="pagination" style="text-align: center; margin: 30px 0;">
    <% if (page > 1) { %>
      <a href="?sort=<%= sort %>&page=<%= page - 1 %>" style="margin-right: 10px;">&laquo; Prev</a>
    <% } %>

    <% for (let i = 1; i <= totalPages; i++) { %>
      <% if (i === page) { %>
        <span style="font-weight: bold; margin: 0 5px;"><%= i %></span>
      <% } else { %>
        <a href="?sort=<%= sort %>&page=<%= i %>" style="margin: 0 5px;"><%= i %></a>
      <% } %>
    <% } %>

    <% if (page < totalPages) { %>
      <a href="?sort=<%= sort %>&page=<%= page + 1 %>" style="margin-left: 10px;">Next &raquo;</a>
    <% } %>
  </div>
<% } %>

  <div id="imageModal" class="hidden">
    <img id="modalImage" src="" />
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script>
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');

    document.addEventListener('click', function(e) {
      const isMobile = /Mobi|Android|iPhone/i.test(navigator.userAgent);
      if (!isMobile && e.target.tagName === 'IMG' && e.target.classList.contains('comment-image-clickable')) {
        modalImg.src = e.target.src;
        modal.classList.remove('hidden');
      }
    });

    modal.addEventListener('click', () => {
      modal.classList.add('hidden');
      modalImg.src = '';
    });
  </script>
  <!-- Comment Form -->
  <div class="comments-container" style="margin-top: 40px;">
    <div class="comment-form-container" style="
      background: rgba(245, 245, 245, 0.95);
      border: 4px solid transparent;
      background-image: url('/images/grass-border.png');
      background-repeat: round;
      background-size: 40px;
      border-radius: 20px;
      padding: 30px 70px 30px 40px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    ">
      <form id="commentForm" action="/team/<%= teamname %>/comment" method="POST" enctype="multipart/form-data">
        <textarea
          id="commentText"
          name="text"
          placeholder="Write your comment..."
          style="
            width: 100%;
            height: 220px;
            font-size: 18px;
            padding: 15px;
            border-radius: 12px;
            border: 1px solid #ccc;
            background: #fff;
            resize: vertical;
            margin-bottom: 15px;
          "
        ></textarea>
        <input type="file" name="media" id="mediaInput" accept="image/*,video/*" style="display: none;" />
        <input type="file" name="tacticImage" id="tacticImageInput" style="display: none;" />
        <img id="mediaPreview" style="max-width: 200px; display: none; margin-top: 10px;" />
        <p id="unauthMessage" class="hidden login-warning" style="margin-top: 12px; font-size: 18px; font-weight: bold; color: #007BFF;">
  Please <span onclick="openLogin()" style="text-decoration: underline; cursor: pointer;">login</span> to post a comment.
</p>
        <div style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 10px;">
          <!-- Tactical Board Button ‚Äî no auth-sensitive-btn class -->
          <button type="button" id="openTacticalBoardBtn" style="
            border: none;
            background: transparent;
            padding: 0;
            margin: 0;
            cursor: pointer;
          ">
            <img src="/images/tactical-board.png" alt="Tactical Board" style="
              width: 220px;
              height: auto;
              display: block;
              border-radius: 12px;
            " />
          </button>
          
          <!-- Attach File Button -->
          <label for="mediaInput" class="auth-sensitive-btn" style="
            border: none;
            background: transparent;
            padding: 0;
            margin: 0;
            cursor: pointer;
            display: inline-block;
          ">
            <img src="/images/attach-file.png" alt="Attach File" style="
              width: 220px;
              height: auto;
              display: block;
              border-radius: 12px;
            " />
          </label>

          <!-- Post Comment Button -->
          <button type="submit" id="submitBtn" class="auth-sensitive-btn comment-submit-btn" style="
            border: none;
            background: transparent;
            padding: 0;
            margin: 0;
            cursor: pointer;
          ">
            <img src="/images/post-commen.png" alt="Post Comment" style="
              width: 220px;
              height: auto;
              display: block;
              border-radius: 12px;
            " />
          </button>

          <!-- Emoji Picker Button (desktop only) -->
          <button type="button" id="emoji-button" style="
            width: 60px;
            height: 60px;
            font-size: 28px;
            border-radius: 12px;
            border: none;
            cursor: pointer;
            background: url('/images/tactical-button-bg.jpg') center/cover no-repeat;
            color: white;
            font-weight: bold;
            display: none;
          ">üòä</button>
        </div>
      </form>
    </div>
  </div>
<script>
  document.querySelector('input[name="media"]').addEventListener('change', function () {
    const file = this.files[0];
    if (file && file.type.startsWith('image/')) {
      const url = URL.createObjectURL(file);
      const img = document.getElementById('mediaPreview');
      img.src = url;
      img.style.display = 'block';
    }
  });
  async function reactToComment(id, newType) {
  if (!isLoggedIn) {
    alert("You must be logged in to react to comments.");
    return;
  }

  const key = `reacted-${id}`;
  const previousType = localStorage.getItem(key);

  // If the same reaction was already selected, ignore it
  if (previousType === newType) {
    alert("You already chose this reaction.");
    return;
  }

  // Send request to update reaction
  const res = await fetch(`/comment/${id}/react/${newType}`, { method: 'POST' });
  if (res.ok) {
    // Decrease previous count (if any)
    if (previousType) {
      const oldSpan = document.getElementById(`${previousType}-${id}`);
      if (oldSpan && parseInt(oldSpan.textContent) > 0) {
        oldSpan.textContent = parseInt(oldSpan.textContent) - 1;
      }
    }

    // Increase new reaction count
    const newSpan = document.getElementById(`${newType}-${id}`);
    if (newSpan) {
      newSpan.textContent = parseInt(newSpan.textContent || 0) + 1;
      newSpan.classList.add('bounce');
      setTimeout(() => newSpan.classList.remove('bounce'), 500);
    }

    // Store the new reaction
    localStorage.setItem(key, newType);
  } else {
    alert("Failed to react. Try again.");
  }
}

  const isLoggedIn = <%= user ? 'true' : 'false' %>;

  function showAuthWarning(targetBtn) {
    const msg = document.getElementById('unauthMessage');
    msg.classList.remove('hidden');
    targetBtn.classList.add('shake');
    setTimeout(() => targetBtn.classList.remove('shake'), 500);
  }

  // Attach File & Post Comment button auth checks
  document.querySelectorAll('.auth-sensitive-btn').forEach(button => {
    button.addEventListener('click', function(e) {
      if (!isLoggedIn) {
        e.preventDefault();
        showAuthWarning(this);
      }
    });
  });

  // Comment form submission check
  document.getElementById('commentForm').addEventListener('submit', function(e) {
    const text = document.getElementById('commentText').value.trim();
    const media = document.querySelector('input[name="media"]').files.length > 0;
    const tactic = document.querySelector('input[name="tacticImage"]').files.length > 0;

    if (!isLoggedIn) {
      e.preventDefault();
      const btn = document.getElementById('submitBtn');
      showAuthWarning(btn);
      return;
    }

    if (!text && !media && !tactic) {
      e.preventDefault();
      alert("Please write a comment or attach media.");
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('openTacticalBoardBtn');

    if (btn) {
      btn.addEventListener('click', (e) => {
        if (!isLoggedIn) {
          e.preventDefault();
          const msg = document.getElementById('unauthMessage');
          msg.classList.remove('hidden');
          btn.classList.add('shake');
          setTimeout(() => btn.classList.remove('shake'), 500);
        } else {
          openTacticalBoard();
        }
      });
    }

    // Orientation warning logic
    window.addEventListener("orientationchange", () => {
      const isPortrait = window.matchMedia("(orientation: portrait)").matches;
      if (!tacticalBoardActivated) return;
      if (isPortrait) {
        closeTacticalBoard();
        showRotateWarning();
      } else {
        hideRotateWarning();
        showTacticalModal();
      }
    });

    document.getElementById("rotateWarning").style.display = "none";
  });
</script>
<script>
  let tacticalBoardActivated = false;
let canvas, ctx;
  const players = [
    { x: 100, y: 100, label: 'GK' }, { x: 200, y: 200, label: 'CB' },
    { x: 300, y: 200, label: 'CB' }, { x: 400, y: 200, label: 'LB' },
    { x: 500, y: 200, label: 'RB' }, { x: 200, y: 300, label: 'CM' },
    { x: 300, y: 300, label: 'CM' }, { x: 400, y: 300, label: 'CM' },
    { x: 250, y: 400, label: 'LW' }, { x: 350, y: 400, label: 'RW' },
    { x: 300, y: 450, label: 'ST' }
  ];

  function loadFormation(code) {
  const midY = canvas.height / 2;
 const lineX = [60, 180, 300, 420, 540, 660, 780]; // More spacing between each column
  const lineY = [80, 160, 240, 320, 400]; // vertical bands (top to bottom)

  players.length = 0;

  if (code === "433") {
    players.push(
      { x: lineX[0], y: midY, label: "GK" },
      { x: lineX[2], y: midY - 170, label: "LB" },
      { x: lineX[1], y: midY - 60, label: "CB" },
      { x: lineX[1], y: midY + 60, label: "CB" },
      { x: lineX[2], y: midY + 170, label: "RB" },
      { x: lineX[3], y: midY - 100, label: "CM" },
      { x: lineX[2], y: midY, label: "CDM" },
      { x: lineX[3], y: midY + 100, label: "CM" },
      { x: lineX[4], y: midY - 150, label: "LW" },
      { x: lineX[4], y: midY + 150, label: "RW" },
      { x: lineX[5], y: midY, label: "ST" }
    );
  }

  if (code === "433f9") {
  players.length = 0;
  players.push(
    { x: lineX[0], y: midY, label: "GK" },
    { x: lineX[2], y: midY - 170, label: "LB" },
    { x: lineX[1], y: midY - 60, label: "LCB" },
    { x: lineX[1], y: midY + 60, label: "RCB" },
    { x: lineX[2], y: midY + 170, label: "RB" },
    { x: lineX[3], y: midY - 100, label: "CM" },
    { x: lineX[2], y: midY, label: "CDM" },
    { x: lineX[3], y: midY + 100, label: "CM" },
    { x: lineX[5], y: midY - 130, label: "LW" },
    { x: lineX[5], y: midY + 130, label: "RW" },
    { x: lineX[4], y: midY, label: "False 9" } // Drops deeper than ST
  );
}

  if (code === "442") {
    players.push(
      { x: lineX[0], y: midY, label: "GK" },
      { x: lineX[2], y: midY - 170, label: "LB" },
      { x: lineX[1], y: midY - 60, label: "CB" },
      { x: lineX[1], y: midY + 60, label: "CB" },
      { x: lineX[2], y: midY + 170, label: "RB" },
      { x: lineX[4], y: midY - 170, label: "LM" },
      { x: lineX[3], y: midY - 60, label: "CDM" },
      { x: lineX[3], y: midY + 60, label: "CDM" },
      { x: lineX[4], y: midY + 170, label: "RM" },
      { x: lineX[5], y: midY - 60, label: "ST" },
      { x: lineX[5], y: midY + 60, label: "ST" }
    );
  }

  if (code === "4231") {
    players.push(
      { x: lineX[0], y: midY, label: "GK" },
      { x: lineX[2], y: midY - 170, label: "LB" },
      { x: lineX[1], y: midY - 60, label: "CB" },
      { x: lineX[1], y: midY + 60, label: "CB" },
      { x: lineX[2], y: midY + 170, label: "RB" },
      { x: lineX[3], y: midY - 60, label: "CDM" },
      { x: lineX[3], y: midY + 60, label: "CDM" },
      { x: lineX[4], y: midY, label: "CAM" },
      { x: lineX[4], y: midY - 170, label: "LM" },
      { x: lineX[4], y: midY + 170, label: "RM" },
      { x: lineX[5], y: midY, label: "ST" }
    );
  }

  if (code === "532") {
    players.push(
      { x: lineX[0], y: midY, label: "GK" },
      { x: lineX[3], y: midY - 190, label: "LWB" },
      { x: lineX[2], y: midY - 110, label: "LCB" },
      { x: lineX[1], y: midY, label: "CB" },
      { x: lineX[2], y: midY + 110, label: "RCB" },
      { x: lineX[3], y: midY + 190, label: "RWB" },
      { x: lineX[4], y: midY - 110, label: "CM" },
      { x: lineX[3], y: midY, label: "CDM" },
      { x: lineX[4], y: midY + 110, label: "CM" },
      { x: lineX[5], y: midY - 60, label: "ST" },
      { x: lineX[5], y: midY + 60, label: "ST" }
    );
  }

  if (code === "523") {
  players.length = 0;
  players.push(
    { x: lineX[0], y: midY, label: "GK" },
    { x: lineX[3], y: midY - 190, label: "LWB" },
    { x: lineX[2], y: midY - 110, label: "LCB" },
    { x: lineX[1], y: midY, label: "CB" },
    { x: lineX[2], y: midY + 110, label: "RCB" },
    { x: lineX[3], y: midY + 190, label: "RWB" },
    { x: lineX[3], y: midY - 70, label: "CM" },
    { x: lineX[3], y: midY + 70, label: "CM" },
    { x: lineX[4], y: midY - 120, label: "LW" },
    { x: lineX[4], y: midY + 120, label: "RW" },
    { x: lineX[5], y: midY, label: "ST" }
  );
}

  drawPlayers();
}

  function drawPlayers() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  players.forEach(p => {
    ctx.beginPath();
    ctx.arc(p.x, p.y, 30, 0, Math.PI * 2); // Bigger circle
    ctx.fillStyle = '#007BFF';
    ctx.fill();
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.fillStyle = 'white';
    ctx.font = 'bold 16px Arial'; // Bigger font
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(p.label, p.x, p.y);
  });
}
  
  let draggedPlayer = null;

  canvas.addEventListener('mousedown', (e) => {
    const rect = canvas.getBoundingClientRect();
    const mx = e.clientX - rect.left;
    const my = e.clientY - rect.top;
    players.forEach(p => {
      const dist = Math.hypot(mx - p.x, my - p.y);
      if (dist < 25) {
        draggedPlayer = p;
        p.dragging = true;
      }
    });
  });

  canvas.addEventListener('mousemove', (e) => {
    if (draggedPlayer && draggedPlayer.dragging) {
      const rect = canvas.getBoundingClientRect();
      draggedPlayer.x = e.clientX - rect.left;
      draggedPlayer.y = e.clientY - rect.top;
      drawPlayers();
    }
  });

  canvas.addEventListener('mouseup', () => {
    if (draggedPlayer) draggedPlayer.dragging = false;
    draggedPlayer = null;
  });

  canvas.addEventListener('mouseleave', () => {
    if (draggedPlayer) draggedPlayer.dragging = false;
    draggedPlayer = null;
  });
  function openTacticalBoard() {
  tacticalBoardActivated = true;
  document.getElementById('tacticalBoardModal').style.display = 'flex';

  // Get canvas AFTER it's in the DOM
  canvas = document.getElementById('tacticalCanvas');
  ctx = canvas.getContext('2d');

  loadFormation('433');
}
  function closeTacticalBoard() {
    tacticalBoardActivated = false;
    document.getElementById('tacticalBoardModal').style.display = 'none';
  }

  function submitTactics() {
    canvas.toBlob(blob => {
      const tacticInput = document.getElementById('tacticImageInput');
      const dt = new DataTransfer();
      const file = new File([blob], "tactic.png", { type: "image/png" });
      dt.items.add(file);
      tacticInput.files = dt.files;

      closeTacticalBoard();
      alert("Tactic image attached to your comment!");
    });
  }

  function showRotateWarning() {
    const warning = document.getElementById('rotateWarning');
    if (warning) warning.style.display = "flex";
  }

  function hideRotateWarning() {
    const warning = document.getElementById('rotateWarning');
    if (warning) warning.style.display = "none";
  }

  window.addEventListener("orientationchange", () => {
    if (!tacticalBoardActivated) return;
    const isPortrait = window.matchMedia("(orientation: portrait)").matches;
    if (isPortrait) {
      closeTacticalBoard();
      showRotateWarning();
    } else {
      hideRotateWarning();
      openTacticalBoard();
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("rotateWarning").style.display = "none";

    const btn = document.getElementById('openTacticalBoardBtn');
    if (btn) {
      btn.addEventListener('click', (e) => {
        if (!isLoggedIn) {
          e.preventDefault();
          const msg = document.getElementById('unauthMessage');
          msg.classList.remove('hidden');
          btn.classList.add('shake');
          setTimeout(() => btn.classList.remove('shake'), 500);
        } else {
          openTacticalBoard();
        }
      });
    }
  });
</script>
<!-- Tactical Board Modal -->
<div id="tacticalBoardModal" style="display: none; position: fixed; z-index: 9999; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.8); justify-content: center; align-items: center;">
  <div style="position: relative; background: white; border-radius: 20px; padding: 20px; max-width: 95vw; max-height: 90vh; overflow: auto;">
    <h2 style="text-align: center; font-size: 28px;">Tactical Board</h2>
    <div style="text-align: center; margin-bottom: 10px;">
  <label for="formationSelect"><strong>Choose Formation:</strong></label>
  <select id="formationSelect" onchange="loadFormation(this.value)" style="padding: 6px 10px; font-size: 16px; border-radius: 6px; margin-left: 8px;">
    <option value="433">4-3-3</option>
    <option value="433f9">4-3-3 (False Nine)</option>
    <option value="442">4-4-2</option>
    <option value="4231">4-2-3-1</option>
    <option value="532">5-3-2</option>
    <option value="523">5-2-3</option>
  </select>
</div>
    <canvas id="tacticalCanvas" width="800" height="500" style="
  border: 2px solid #ccc;
  border-radius: 10px;
  display: block;
  margin: 20px auto;
  background: url('/images/tactical-pitch.png') center/cover no-repeat;
"></canvas>

    <div style="text-align: center; margin-top: 20px;">
      <button onclick="submitTactics()" style="padding: 10px 20px; font-size: 16px; margin-right: 10px;">Submit</button>
      <button onclick="closeTacticalBoard()" style="padding: 10px 20px; font-size: 16px;">Exit</button>
    </div>
  </div>
</div>

<!-- Rotate Phone Warning -->
<div id="rotateWarning" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.95); color: white; font-size: 22px; font-weight: bold; justify-content: center; align-items: center; z-index: 10000; text-align: center; padding: 30px;">
  Please rotate your phone to <span style="color: #00ffcc;">landscape</span> to use the tactical board.
</div>
<!-- Poke Rival Modal -->
<div id="pokeRivalModal" style="display: none; position: fixed; z-index: 9999; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.9); justify-content: center; align-items: center;">
  <div style="background: white; border-radius: 20px; padding: 30px; width: 95%; max-width: 600px; position: relative;">
    <h2 style="text-align: center;">Poke a Rival Team</h2>
    <form action="/poke-rival" method="POST" enctype="multipart/form-data">
      <input type="hidden" name="teamA" value="<%= teamname %>"/>
      <label for="teamB"><strong>Select Rival Team:</strong></label>
      <select name="teamB" required style="width: 100%; margin-top: 10px; padding: 10px; border-radius: 8px; border: 1px solid #ccc;">
        <% Object.entries(teamToLeagueMap).forEach(([slug, info]) => { %>
          <% if (slug !== teamname) { %>
            <option value="<%= slug %>"><%= info.name %> ‚Äî <%= slug.replace(/-/g, ' ') %></option>
          <% } %>
        <% }); %>
      </select>

      <textarea name="text" placeholder="Write your poke..." required style="width: 100%; height: 150px; margin-top: 15px; padding: 12px; font-size: 16px; border-radius: 8px; border: 1px solid #ccc;"></textarea>

      <input type="file" name="media" accept="image/*,video/*" style="margin-top: 10px;" />

      <div style="text-align: center; margin-top: 20px;">
        <button type="submit" style="padding: 10px 20px; font-size: 16px; margin-right: 10px;">Submit</button>
        <button type="button" onclick="closePokeRivalModal()" style="padding: 10px 20px; font-size: 16px;">Cancel</button>
      </div>
    </form>
  </div>
</div>
<script>
  const pokeBtn = document.getElementById('pokeRivalBtn');
  const pokeModal = document.getElementById('pokeRivalModal');

  if (pokeBtn) {
  pokeBtn.addEventListener('click', (e) => {
    if (!isLoggedIn) {
      e.preventDefault();
      showAuthWarning(pokeBtn);
      // Optional: if you have a login modal function, trigger it here
      if (typeof openLogin === 'function') openLogin();
      return;
    }
    pokeModal.style.display = 'flex';
  });
}

  function closePokeRivalModal() {
    pokeModal.style.display = 'none';
  }
</script>
<script>
  const pokeExpiries = [
    <% pokeThreads.forEach(poke => { %>
      {
        id: "<%= poke.id %>",
        expiry: <%= poke.createdAtMillis + 4 * 60 * 60 * 1000 %>
      },
    <% }); %>
  ];

  function updateCountdowns() {
    const now = Date.now();
    pokeExpiries.forEach(p => {
      const timeLeft = p.expiry - now;
      const el = document.getElementById("countdown-" + p.id);

      if (el) {
        if (timeLeft <= 0) {
          el.innerText = "Expired";
          el.closest(".poke-thread")?.remove(); // optional: hide it immediately
        } else {
          const hours = Math.floor(timeLeft / (1000 * 60 * 60));
          const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
          el.innerText = `‚è≥ Expires in: ${hours}h ${minutes}m ${seconds}s`;
        }
      }
    });
  }

  setInterval(updateCountdowns, 1000);
</script>
</body>
</html>
