<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title><%= teamname %> Fan Page | Footy Feverz</title>
  <link rel="stylesheet" href="/style.css" />
  <script src="https://cdn.jsdelivr.net/npm/@joeattardi/emoji-button@4.6.2/dist/emoji-button.min.js"></script>
  <style>
    .comment-image-clickable {
      width: 100%;
      max-width: 90vw;
      height: auto;
      border-radius: 12px;
      margin-top: 12px;
      cursor: zoom-in;
    }

    @media (min-width: 768px) {
      .comment-image-clickable {
        max-width: 600px;
      }
    }

    #imageModal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.85);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    #modalImage {
      max-width: 95%;
      max-height: 95%;
      border-radius: 10px;
      box-shadow: 0 0 20px black;
    }

    .shake {
      animation: shake 0.4s;
    }

    @keyframes shake {
      0% { transform: translateX(0); }
      25% { transform: translateX(-5px); }
      50% { transform: translateX(5px); }
      75% { transform: translateX(-5px); }
      100% { transform: translateX(0); }
    }
  </style>
  <style>
  @media (max-width: 767px) {
    #commentForm button img,
    #commentForm label img {
      width: 140px !important;
    }

    #emoji-button {
      display: none !important;
    }
  }
</style>
</head>
<body>
  <%- include('partials/_header', {
    headerClass: 'header-simple',
    showAuthLinks: false,
    showLeagueLink: true,
    leagueSlug,
    leagueName
  }) %>
  <h1 style="text-align: center;"><%= teamname.toUpperCase() %> Fan Comments</h1>

  <div class="sort-comments" style="text-align: center; margin-bottom: 20px;">
    <form method="GET">
      <label for="sort">Sort by:</label>
      <select name="sort" id="sort" onchange="this.form.submit()">
        <option value="new" <%= (!sort || sort === 'new') ? 'selected' : '' %>>Newest</option>
        <option value="top" <%= (sort === 'top') ? 'selected' : '' %>>Top</option>
      </select>
    </form>
  </div>

  <div id="commentsContainer" class="comments-container">
    <% if (comments.length === 0) { %>
      <p>No comments yet. Be the first!</p>
    <% } else { %>
      <% comments.forEach(comment => { %>
        <div class="comment-item">
          <div class="comment-user" style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
            <img src="<%= comment.profile_pic || '/default-avatar.png' %>" alt="Avatar" class="comment-avatar" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;" />
            <strong><a href="/user/<%= comment.user %>"><%= comment.user %></a></strong>
          </div>

          <% if (comment.text && comment.text.trim()) { %>
            <p><%= comment.text %></p>
          <% } %>

          <% if (comment.media) {
            const isVideo = comment.media.endsWith('.mp4') || comment.media.endsWith('.webm') || comment.media.endsWith('.ogg');
          %>
            <% if (isVideo) { %>
              <video src="<%= comment.media %>" controls style="max-width: 100%; border-radius: 10px; margin-top: 10px;"></video>
            <% } else { %>
              <img src="<%= comment.media %>" class="comment-image-clickable" />
            <% } %>
          <% } %>

          <div class="reactions">
            <button onclick="reactToComment('<%= comment.id %>', 'like')">üëç <span id="like-<%= comment.id %>"><%= comment.like_reactions || 0 %></span></button>
            <button onclick="reactToComment('<%= comment.id %>', 'funny')">üòÇ <span id="funny-<%= comment.id %>"><%= comment.funny_reactions || 0 %></span></button>
            <button onclick="reactToComment('<%= comment.id %>', 'angry')">üò° <span id="angry-<%= comment.id %>"><%= comment.angry_reactions || 0 %></span></button>
            <button onclick="reactToComment('<%= comment.id %>', 'love')">üòç <span id="love-<%= comment.id %>"><%= comment.love_reactions || 0 %></span></button>
          </div>

          <small style="color: #999;"><%= comment.relativeTime %></small>
        </div>
      <% }) %>
    <% } %>
  </div>

  <div id="imageModal" class="hidden">
    <img id="modalImage" src="" />
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script>
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');

    document.addEventListener('click', function(e) {
      const isMobile = /Mobi|Android|iPhone/i.test(navigator.userAgent);
      if (!isMobile && e.target.tagName === 'IMG' && e.target.classList.contains('comment-image-clickable')) {
        modalImg.src = e.target.src;
        modal.classList.remove('hidden');
      }
    });

    modal.addEventListener('click', () => {
      modal.classList.add('hidden');
      modalImg.src = '';
    });
  </script>
  <!-- Comment Form -->
  <div class="comments-container" style="margin-top: 40px;">
    <div class="comment-form-container" style="
      background: rgba(245, 245, 245, 0.95);
      border: 4px solid transparent;
      background-image: url('/images/grass-border.png');
      background-repeat: round;
      background-size: 40px;
      border-radius: 20px;
      padding: 30px 70px 30px 40px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    ">
      <form id="commentForm" action="/team/<%= teamname %>/comment" method="POST" enctype="multipart/form-data">
        <textarea
          id="commentText"
          name="text"
          placeholder="Write your comment..."
          style="
            width: 100%;
            height: 220px;
            font-size: 18px;
            padding: 15px;
            border-radius: 12px;
            border: 1px solid #ccc;
            background: #fff;
            resize: vertical;
            margin-bottom: 15px;
          "
        ></textarea>
        <input type="file" name="media" id="mediaInput" accept="image/*,video/*" style="display: none;" />
        <input type="file" name="tacticImage" id="tacticImageInput" style="display: none;" />
        <img id="mediaPreview" style="max-width: 200px; display: none; margin-top: 10px;" />
        <p id="unauthMessage" class="hidden login-warning" style="margin-top: 12px; font-size: 18px; font-weight: bold; color: #007BFF;">
          You must <span onclick="openLogin()" style="text-decoration: underline; cursor: pointer;">login</span> to post a comment.
        </p>
        <div style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 10px;">
          <!-- Tactical Board Button ‚Äî no auth-sensitive-btn class -->
          <button type="button" id="openTacticalBoardBtn" style="
            border: none;
            background: transparent;
            padding: 0;
            margin: 0;
            cursor: pointer;
          ">
            <img src="/images/tactical-board.png" alt="Tactical Board" style="
              width: 220px;
              height: auto;
              display: block;
              border-radius: 12px;
            " />
          </button>

          <!-- Attach File Button -->
          <label for="mediaInput" class="auth-sensitive-btn" style="
            border: none;
            background: transparent;
            padding: 0;
            margin: 0;
            cursor: pointer;
            display: inline-block;
          ">
            <img src="/images/attach-file.png" alt="Attach File" style="
              width: 220px;
              height: auto;
              display: block;
              border-radius: 12px;
            " />
          </label>

          <!-- Post Comment Button -->
          <button type="submit" id="submitBtn" class="auth-sensitive-btn comment-submit-btn" style="
            border: none;
            background: transparent;
            padding: 0;
            margin: 0;
            cursor: pointer;
          ">
            <img src="/images/post-commen.png" alt="Post Comment" style="
              width: 220px;
              height: auto;
              display: block;
              border-radius: 12px;
            " />
          </button>

          <!-- Emoji Picker Button (desktop only) -->
          <button type="button" id="emoji-button" style="
            width: 60px;
            height: 60px;
            font-size: 28px;
            border-radius: 12px;
            border: none;
            cursor: pointer;
            background: url('/images/tactical-button-bg.jpg') center/cover no-repeat;
            color: white;
            font-weight: bold;
            display: none;
          ">üòä</button>
        </div>
      </form>
    </div>
  </div>
<script>
  document.querySelector('input[name="media"]').addEventListener('change', function () {
    const file = this.files[0];
    if (file && file.type.startsWith('image/')) {
      const url = URL.createObjectURL(file);
      const img = document.getElementById('mediaPreview');
      img.src = url;
      img.style.display = 'block';
    }
  });
  async function reactToComment(id, newType) {
  if (!isLoggedIn) {
    alert("You must be logged in to react to comments.");
    return;
  }

  const key = `reacted-${id}`;
  const previousType = localStorage.getItem(key);

  // If the same reaction was already selected, ignore it
  if (previousType === newType) {
    alert("You already chose this reaction.");
    return;
  }

  // Send request to update reaction
  const res = await fetch(`/comment/${id}/react/${newType}`, { method: 'POST' });
  if (res.ok) {
    // Decrease previous count (if any)
    if (previousType) {
      const oldSpan = document.getElementById(`${previousType}-${id}`);
      if (oldSpan && parseInt(oldSpan.textContent) > 0) {
        oldSpan.textContent = parseInt(oldSpan.textContent) - 1;
      }
    }

    // Increase new reaction count
    const newSpan = document.getElementById(`${newType}-${id}`);
    if (newSpan) {
      newSpan.textContent = parseInt(newSpan.textContent || 0) + 1;
      newSpan.classList.add('bounce');
      setTimeout(() => newSpan.classList.remove('bounce'), 500);
    }

    // Store the new reaction
    localStorage.setItem(key, newType);
  } else {
    alert("Failed to react. Try again.");
  }
}

  const isLoggedIn = <%= user ? 'true' : 'false' %>;

  function showAuthWarning(targetBtn) {
    const msg = document.getElementById('unauthMessage');
    msg.classList.remove('hidden');
    targetBtn.classList.add('shake');
    setTimeout(() => targetBtn.classList.remove('shake'), 500);
  }

  // Attach File & Post Comment button auth checks
  document.querySelectorAll('.auth-sensitive-btn').forEach(button => {
    button.addEventListener('click', function(e) {
      if (!isLoggedIn) {
        e.preventDefault();
        showAuthWarning(this);
      }
    });
  });

  // Comment form submission check
  document.getElementById('commentForm').addEventListener('submit', function(e) {
    const text = document.getElementById('commentText').value.trim();
    const media = document.querySelector('input[name="media"]').files.length > 0;
    const tactic = document.querySelector('input[name="tacticImage"]').files.length > 0;

    if (!isLoggedIn) {
      e.preventDefault();
      const btn = document.getElementById('submitBtn');
      showAuthWarning(btn);
      return;
    }

    if (!text && !media && !tactic) {
      e.preventDefault();
      alert("Please write a comment or attach media.");
    }
  });
</script>
<%- include('partials/_tactical-board', { user }) %>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('openTacticalBoardBtn');

    if (btn) {
      btn.addEventListener('click', (e) => {
        if (!isLoggedIn) {
          e.preventDefault();
          const msg = document.getElementById('unauthMessage');
          msg.classList.remove('hidden');
          btn.classList.add('shake');
          setTimeout(() => btn.classList.remove('shake'), 500);
        } else {
          openTacticalBoard();
        }
      });
    }

    // Orientation warning logic
    window.addEventListener("orientationchange", () => {
      const isPortrait = window.matchMedia("(orientation: portrait)").matches;
      if (!tacticalBoardActivated) return;
      if (isPortrait) {
        closeTacticalBoard();
        showRotateWarning();
      } else {
        hideRotateWarning();
        showTacticalModal();
      }
    });

    document.getElementById("rotateWarning").style.display = "none";
  });
</script>
</body>
</html>
